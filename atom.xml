<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leiy</title>
  
  <subtitle>ML &amp; DL</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leiy.live/"/>
  <updated>2019-03-13T12:27:43.430Z</updated>
  <id>http://leiy.live/</id>
  
  <author>
    <name>Leiy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="http://leiy.live/2019/03/13/test/"/>
    <id>http://leiy.live/2019/03/13/test/</id>
    <published>2019-03-13T12:07:52.706Z</published>
    <updated>2019-03-13T12:27:43.430Z</updated>
    
    <content type="html"><![CDATA[<p>你好啊</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你好啊&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="test" scheme="http://leiy.live/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Python入门之字符串处理</title>
    <link href="http://leiy.live/2019/03/13/Python%E6%80%BB%E7%BB%93(2)/"/>
    <id>http://leiy.live/2019/03/13/Python总结(2)/</id>
    <published>2019-03-13T04:30:03.392Z</published>
    <updated>2018-10-05T09:35:39.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h1><h2 id="inpute"><a href="#inpute" class="headerlink" title="inpute"></a>inpute</h2><ul><li>通过键盘获取数据，然后保存到指定变量中，都是按照字符串方式进行保存</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">a = input('请输入数据1:')b = input('请输入数据2:')print(a + b)  # a,b都是按照字符串形式保存a = int(input('请输入数据1:'))b = int(input('请输入数据2:'))print(a + b)  # a,b强转int类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>请输入数据1:1请输入数据2:212请输入数据1:1请输入数据2:23</code></pre><h2 id="output"><a href="#output" class="headerlink" title="output"></a>output</h2><h3 id="通用格式"><a href="#通用格式" class="headerlink" title="通用格式"></a>通用格式</h3><ul><li>print函数中参数sep指的是当打印各个值时,各个值之间的分割方式,默认空格,end参数表示print中传入值输出完成后结束符号,默认换行</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">a = 1b = 2c = 3print(a,b,c)print(a,b,c,end = 'love')print()print(a,b,c,sep = '|')print('-'*50)print('a = %s'%(a)) # %s>%d>%fprint('a = %04s'%(a)) # 输出带4个空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1 2 31 2 3love1|2|3--------------------------------------------------a = 1a =    1</code></pre><h3 id="format格式"><a href="#format格式" class="headerlink" title="format格式"></a>format格式</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">a = 1b = 2print('{}输出{}'.format(a,b))print('{1}输出{0}'.format(a,b)) #交换索引位置print('{a}输出{b}{a}'.format(a = 1,b = 2))print('-'*50)# 指定位置输出print('{:<10}输出{}'.format('Leiy','111')) #Leiy左对齐print('{:>10}输出{}'.format('Leiy','111')) #Leiy右对齐print('{:^14}'.format('叶磊'))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1输出22输出11输出21--------------------------------------------------Leiy      输出111    Leiy输出111    叶磊  </code></pre><h1 id="下标和切片"><a href="#下标和切片" class="headerlink" title="下标和切片"></a>下标和切片</h1><p><a href="http://leiy.live/2018/10/03/Python%E6%80%BB%E7%BB%93(1)/#more">Python入门之基本语法和数据类型</a></p><h1 id="常见字符串函数"><a href="#常见字符串函数" class="headerlink" title="常见字符串函数"></a>常见字符串函数</h1><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><ul><li>检查字符串是否包含某个指定字符</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = 'Hello World'#findprint(str1.find('o'))#只是返回第一个所要寻找字母的所在地点print(str1.find('a'))#找不到会返回 -1print(str1.find('lo'))#可以寻找一个整体print(str1.find('r',0,4))#限定了寻找范围的find<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4-13-1</code></pre><h2 id="index"><a href="#index" class="headerlink" title="index"></a>index</h2><ul><li>检查字符串是否包含某指定字符</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = 'Hello World'#indexprint(str1.index('r'))#index与find不同的是当找不到的时候会报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>8</code></pre><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><ul><li>统计某个字符在指定范围内出现的次数</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = 'Hello World'#countprint(str1.count('o'))#2print(str1.count('o',0,6))#同理限定范围内的寻找并计数 前闭后开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>21</code></pre><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><ul><li>将str1中的str1替换为str2,如果指定count,则不超过count次</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = 'hello world hello china'str2 = str1.replace('hello','Hello',1)#这边只是替换第一个 默认是全部替换print(str1.replace('hello','Hello'))#默认把所有的都替换掉print(str1)#本质上str1无法替换 字符串无法修改只是会生成新的字符串print(str2)#替换后<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Hello world Hello chinahello world hello chinaHello world hello china</code></pre><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><ul><li>分割字符,如果maxsplit有指定值，则仅分割maxsplit个字符串</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = 'hello world hello china'print(str1.split(' ')) #空格地方分割print(str1.split('o',3)) #在小o地方分割最多分割3处<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;china&#39;][&#39;hell&#39;, &#39; world hello china&#39;]</code></pre><h2 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize"></a>capitalize</h2><ul><li>将字符串首字母大写</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = 'hello world hello china'print(str1.capitalize()) #第一个字母大写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Hello world hello china</code></pre><h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><ul><li>将字符串中每个单词的首字母大写</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = 'hello world hello china'print(str1.title())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>Hello World Hello China</code></pre><h2 id="startwith-amp-endswith"><a href="#startwith-amp-endswith" class="headerlink" title="startwith &amp; endswith"></a>startwith &amp; endswith</h2><ul><li>检查字符串是否以obj开头,是则返回True,否则为False</li><li>检查字符串是否以obj结尾,是则返回True,否则为False</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = 'hello world hello china'print(str1.startswith('hello'))print(str1.endswith('hello'))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>TrueFalse</code></pre><h2 id="lower-amp-upper"><a href="#lower-amp-upper" class="headerlink" title="lower &amp; upper"></a>lower &amp; upper</h2><ul><li>将字符串转换为小写</li><li>将字符串转换为大写</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = 'hello world hello china'print(str1.lower())print(str1.upper())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>hello world hello chinaHELLO WORLD HELLO CHINA</code></pre><h2 id="ljust-amp-rjust-amp-center"><a href="#ljust-amp-rjust-amp-center" class="headerlink" title="ljust &amp; rjust &amp; center"></a>ljust &amp; rjust &amp; center</h2><ul><li>返回一个原字符串左对齐,并使用空格填充至长度width的新字符串</li><li>返回一个原字符串右对齐,并使用空格填充至长度width的新字符串</li><li>返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = 'hello'print(str1.ljust(10))  #开辟10个位置 并且左对齐print(str1.rjust(10))  #开辟10个位置 并且右对齐print(str1.center(10)) #开辟10个位置 并且中间对齐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>hello         hellohello   </code></pre><h2 id="lstrip-amp-rstrip-amp-strip"><a href="#lstrip-amp-rstrip-amp-strip" class="headerlink" title="lstrip &amp; rstrip &amp; strip"></a>lstrip &amp; rstrip &amp; strip</h2><ul><li>去除字符串左边空白字符</li><li>去除字符串右边空白字符</li><li>去除字符串两边空白字符</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = '     Hello     ' print(str1.lstrip())#默认删除左空格 print(str1.lstrip('%'))#这句话是说删除%  这里没加print(str1.strip())#这句话是从两边删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Hello         Hello     Hello</code></pre><h2 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h2><ul><li>可以将字符串按照str1分割成三个部分 str1前,str1, str1后</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = 'hello world hello china'print(str1.partition('world')) #将字符串分割成三个部分 前 world 后 返回为元祖<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>(&#39;hello &#39;, &#39;world&#39;, &#39; hello china&#39;)</code></pre><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><ul><li>str1 中每个字符串后面插入str1,构造出一个新的字符串</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = '-'list1 = ['hello','world','hello','china']print(str1.join(list1)) #默认将,号转换为下划线  将列表转换为字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>hello-world-hello-china</code></pre><h2 id="issapce-amp-isalnum"><a href="#issapce-amp-isalnum" class="headerlink" title="issapce &amp; isalnum"></a>issapce &amp; isalnum</h2><ul><li>如果str1中只包含空格,返回True,否则为False</li><li>如果str1中只包含数字,返回True,否则为False</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = 'asd123 321asd'print(str1.isspace())#如果str1中只包含空格则返回true 否则falseprint(str1.isalnum())#如果都是字母或数字则返回true,否则false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>FalseFalse</code></pre><h2 id="isdigit-amp-isalpha"><a href="#isdigit-amp-isalpha" class="headerlink" title="isdigit &amp; isalpha"></a>isdigit &amp; isalpha</h2><ul><li>如果str1中只包含数字,返回True,否则为False</li><li>如果str1中只包含字母,返回True,否则为False</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = 'asd123 321asd'print(str1.isdigit())#如果都是数字则返回True否则falseprint(str1.isalpha())#判断是否全是字母<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>FalseFalse</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;输入与输出&quot;&gt;&lt;a href=&quot;#输入与输出&quot; class=&quot;headerlink&quot; title=&quot;输入与输出&quot;&gt;&lt;/a&gt;输入与输出&lt;/h1&gt;&lt;h2 id=&quot;inpute&quot;&gt;&lt;a href=&quot;#inpute&quot; class=&quot;headerlink&quot; title=&quot;i
      
    
    </summary>
    
      <category term="Python入门" scheme="http://leiy.live/categories/Python%E5%85%A5%E9%97%A8/"/>
    
      <category term="字符串处理" scheme="http://leiy.live/categories/Python%E5%85%A5%E9%97%A8/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
    
      <category term="Python" scheme="http://leiy.live/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python入门之基本语法和数据类型</title>
    <link href="http://leiy.live/2019/03/13/Python%E6%80%BB%E7%BB%93(1)/"/>
    <id>http://leiy.live/2019/03/13/Python总结(1)/</id>
    <published>2019-03-13T04:30:03.376Z</published>
    <updated>2019-03-14T07:51:22.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul><li>单行注释使用 “#” 开头</li><li>多行注释使用 ‘’‘注释内容’‘’</li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li>变量命名规则采用驼峰命名法,驼峰命名法分为大驼峰(UserName)和小驼峰(userName)</li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>int(整数)<br>float(浮点数)<br>complex(复数)<br>bool(布尔)</p><h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串))"></a>String(字符串))</h2><ul><li>在pyton中字符串采用单引号或者双引号，同时可以使用反斜杠 () 表示转义特殊字符</li></ul><h3 id="字符串索引和切片"><a href="#字符串索引和切片" class="headerlink" title="字符串索引和切片"></a>字符串索引和切片</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = 'abcdefg'print(str1[0])print(str1[0:2]) #左闭右开print(str1[-1:-4:-1]) #第三个参数表示步长print(type(str1[0]))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>aabgfe&lt;class &#39;str&#39;&gt;</code></pre><h3 id="字符串的加法和乘法"><a href="#字符串的加法和乘法" class="headerlink" title="字符串的加法和乘法"></a>字符串的加法和乘法</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">str1 = '---'str2 = '***'print(str1 + str2)print(str2*5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>---******************</code></pre><h2 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h2><ul><li>列表使用方括号中间元素用逗号隔开</li></ul><h3 id="列表的索引和切片"><a href="#列表的索引和切片" class="headerlink" title="列表的索引和切片"></a>列表的索引和切片</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">list1 = ['你好','Leiy','Syy']print(list1[:])print(list1[0:2])print(type(list1))print(type(list1[0]))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;你好&#39;, &#39;Leiy&#39;, &#39;Syy&#39;][&#39;你好&#39;, &#39;Leiy&#39;]&lt;class &#39;list&#39;&gt;&lt;class &#39;str&#39;&gt;</code></pre><h3 id="列表拼接"><a href="#列表拼接" class="headerlink" title="列表拼接"></a>列表拼接</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">list1 = ['你好']list2 = ['苏大']print(list1+list2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;你好&#39;, &#39;苏大&#39;]</code></pre><h3 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">list1 = ['你好','abcd',123]# list1[1][1] = 'a'  #error 字符串可以被索引但是没法子修改list1[0] = 'a'print(list1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[&#39;a&#39;, &#39;abcd&#39;, 123]</code></pre><h2 id="Tuple-元祖"><a href="#Tuple-元祖" class="headerlink" title="Tuple(元祖)"></a>Tuple(元祖)</h2><ul><li>元祖使用小括号中间元素用逗号隔开</li><li>tuple的元素不可以改变但是可以包含可以改变的对象如list</li></ul><h3 id="元祖索引"><a href="#元祖索引" class="headerlink" title="元祖索引"></a>元祖索引</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">tuple1 = ('abc', '你好', 123, [1, 2, 3, 4])print(tuple1)       # 打印整个元祖数据print(tuple1[0:2])  # 打印第二个元祖数据tuple1[3][0] = 4    # 修改元祖第3个数据的第一个数据 元祖虽然不可变但列表可变print(tuple1)       # 打印修改后的元祖<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>(&#39;abc&#39;, &#39;你好&#39;, 123, [1, 2, 3, 4])(&#39;abc&#39;, &#39;你好&#39;)(&#39;abc&#39;, &#39;你好&#39;, 123, [4, 2, 3, 4])</code></pre><h2 id="Dictionary-字典"><a href="#Dictionary-字典" class="headerlink" title="Dictionary(字典)"></a>Dictionary(字典)</h2><ul><li>字典是一种映射类型,使用{}</li><li>键值key必须使用不可边类型(字符串,数值,元祖),同一个字典中,键必须是唯一的</li><li>创建空字典用{}</li></ul><h3 id="字典的索引"><a href="#字典的索引" class="headerlink" title="字典的索引"></a>字典的索引</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">dict1 = {'name':'Leiy','age':17,'sex':'man'}print(dict1)dict2 = {'name':'Leiy','age':17,'sex':'man','name':'syy'} #同一个字典产生了两个name 后面一个name覆盖了前面print(dict2)print(dict2['name'])#这边是索引dict1的name值dict3 = {'zhuang':{'age':17,'name':'Leiy'}}print(dict3['zhuang'])        #字典索引print(dict3['zhuang']['name'])#多层索引的获取<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>{&#39;name&#39;: &#39;Leiy&#39;, &#39;age&#39;: 17, &#39;sex&#39;: &#39;man&#39;}{&#39;name&#39;: &#39;syy&#39;, &#39;age&#39;: 17, &#39;sex&#39;: &#39;man&#39;}syy{&#39;age&#39;: 17, &#39;name&#39;: &#39;Leiy&#39;}Leiy</code></pre><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><ul><li>算术运算符有七种分别为<br>+, -, <em>, /, %(取余)), *</em>(幂)), //(取整)</li></ul><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><ul><li>赋值运算符有八种分别为<br>=, +=, -=, <em>=, /=, %=, *</em>=, //=</li></ul><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><ul><li>比较运算符有六种<br>==, ！=, &gt;, &lt;, &gt;=, &lt;=</li></ul><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>and(布尔‘与’),or(布尔’或‘),not(布尔’非‘)</p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>&amp;(按位与)<br>|(按位或)<br>^(按位异或)<br>～(按位取反)<br>&lt;&lt;(左移运算符)<br>>&gt;(右移运算符)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;单行注释使用 “#” 开头&lt;/li&gt;
&lt;li&gt;多行注释使用 ‘’‘注释内容’‘’&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;变量&quot;&gt;
      
    
    </summary>
    
      <category term="Python入门" scheme="http://leiy.live/categories/Python%E5%85%A5%E9%97%A8/"/>
    
      <category term="基本语法和数据类型" scheme="http://leiy.live/categories/Python%E5%85%A5%E9%97%A8/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
      <category term="Python" scheme="http://leiy.live/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Pandas总结</title>
    <link href="http://leiy.live/2019/03/13/pandas/"/>
    <id>http://leiy.live/2019/03/13/pandas/</id>
    <published>2019-03-13T04:30:03.376Z</published>
    <updated>2018-08-24T02:15:30.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pandas基本数据结构"><a href="#Pandas基本数据结构" class="headerlink" title="Pandas基本数据结构"></a>Pandas基本数据结构</h1><blockquote><p>pandas中主要的数据结构为Series和DataFrame,其中Series是一种类似于一维数据的对象,由一组数据以及与之相关的数据标签组成，仅由一组数据也是可以产生简单的Seriesd对象，注意:Series中的索引值也是可以重复的。DataFrame是一种表格型数据结构，包含一组有序的列，每列可以是不同的值类型(数值,字符串,布尔型)，DataFram有行索引也有列索引，可以看作是Series组成的字典。</p></blockquote><p><br><br><br><br><br></p><h1 id="Series基本概述"><a href="#Series基本概述" class="headerlink" title="Series基本概述"></a>Series基本概述</h1><h2 id="Series创建"><a href="#Series创建" class="headerlink" title="Series创建"></a>Series创建</h2><h3 id="使用列表创建Series"><a href="#使用列表创建Series" class="headerlink" title="使用列表创建Series"></a>使用列表创建Series</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">ser = pd.Series([1,2,3,4])ser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>0    11    22    33    4dtype: int64</code></pre><h3 id="使用数组创建"><a href="#使用数组创建" class="headerlink" title="使用数组创建"></a>使用数组创建</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">ser = pd.Series(np.random.randint(1,9,5))ser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>0    21    42    23    64    1dtype: int64</code></pre><h3 id="使用字典创建"><a href="#使用字典创建" class="headerlink" title="使用字典创建"></a>使用字典创建</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">dic = {    'a' : 1,    'b' : 2,    'c' : 3}ser = pd.Series(dic)ser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>a    1b    2c    3dtype: int64</code></pre><h2 id="Series的index和value"><a href="#Series的index和value" class="headerlink" title="Series的index和value"></a>Series的index和value</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">dic = {    'a' : 1,    'b' : 2,    'c' : 3}ser = pd.Series(dic)print(ser)print('-'*50)print(ser.index)print(ser.values)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>a    1b    2c    3dtype: int64--------------------------------------------------Index([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], dtype=&#39;object&#39;)[1 2 3]</code></pre><h2 id="修改和指定index"><a href="#修改和指定index" class="headerlink" title="修改和指定index"></a>修改和指定index</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python"># 修改indexarr = pd.Series(np.random.randint(1,9,5))print(arr)print('---------------index修改后---------------------')arr.index = list('abcde')print(arr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0    61    42    73    24    1dtype: int64---------------index修改后---------------------a    6b    4c    7d    2e    1dtype: int64</code></pre><pre class="line-numbers language-lang-python"><code class="language-lang-python"># 创建时指定indexarr = pd.Series(np.random.randint(1,9,5),index = ['a','b','c','d','e'])arr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>a    4b    3c    8d    4e    7dtype: int64</code></pre><h2 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">ser = pd.Series(np.random.randint(1,9,5),index = ['a','b','c','d','e'])print(ser)print('---------------增加一个index-----------------------')ser.name = 'Leiy' # 如果不存在name自动创建 如果存在这一步就是改变name对应的value print(ser)print('---------------常见Series属性-----------------------')print('行轴标签数据列表为:',ser.axes)print('对象的数据类型:',ser.dtype)print('检测系列是否为空:',ser.empty)print('底层数据的维度:',ser.ndim)print('基层数据中的元素数目:',ser.size)print('返回数据的前3行:',ser.head(3))print('返回数据的后3行:',ser.tail(2))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>a    5b    7c    8d    7e    5dtype: int64---------------增加一个index-----------------------a    5b    7c    8d    7e    5Name: Leiy, dtype: int64---------------常见Series属性-----------------------行轴标签数据列表为: [Index([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;], dtype=&#39;object&#39;)]对象的数据类型: int64检测系列是否为空: False底层数据的维度: 1基层数据中的元素数目: 5返回数据的前3行: a    5b    7c    8Name: Leiy, dtype: int64返回数据的后3行: d    7e    5Name: Leiy, dtype: int64</code></pre><h2 id="索引与切片"><a href="#索引与切片" class="headerlink" title="索引与切片"></a>索引与切片</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">ser = pd.Series(np.random.randint(1,9,5),index = ['a','b','c','d','e'])print(ser)print('---------------索引-----------------------')print(ser['a'])print(ser[0]) # 数字下标索引print(ser[['a','c']])print('---------------切片-----------------------')print(ser['a':'c'])print(ser[0:3])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>a    1b    4c    1d    7e    5dtype: int64---------------索引-----------------------11a    1c    1dtype: int64---------------切片-----------------------a    1b    4c    1dtype: int64a    1b    4c    1dtype: int64</code></pre><h2 id="Series运算"><a href="#Series运算" class="headerlink" title="Series运算"></a>Series运算</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">ser1 = pd.Series(np.random.randint(1,5,5))ser2 = pd.Series(np.random.randint(1,5,5))print(ser1)print(ser2)print('---------------Series与标量的运算-----------------------')print(ser1 + 10)print(ser1 - 10)print(ser1 * 10)print(ser1 / 10)print(ser1 ** 2)print('---------------Series与Series的运算--------------------')print(ser1 + ser2)print(ser1 - ser2)print(ser1 * ser2)print(ser1 / ser2)print(ser1 ** ser2)print('---------------Series的其他运算------------------------')print(np.log(ser1))print(np.exp(ser1))print(ser < 2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0    11    22    33    24    3dtype: int640    21    42    13    44    1dtype: int64---------------Series与标量的运算-----------------------0    111    122    133    124    13dtype: int640   -91   -82   -73   -84   -7dtype: int640    101    202    303    204    30dtype: int640    0.11    0.22    0.33    0.24    0.3dtype: float640    11    42    93    44    9dtype: int64---------------Series与Series的运算--------------------0    31    62    43    64    4dtype: int640   -11   -22    23   -24    2dtype: int640    21    82    33    84    3dtype: int640    0.51    0.52    3.03    0.54    3.0dtype: float640     11    162     33    164     3dtype: int64---------------Series的其他运算------------------------0    0.0000001    0.6931472    1.0986123    0.6931474    1.098612dtype: float640     2.7182821     7.3890562    20.0855373     7.3890564    20.085537dtype: float640     True1    False2    False3    False4    Falsedtype: bool</code></pre><h2 id="Series自动对齐、缺失值过滤"><a href="#Series自动对齐、缺失值过滤" class="headerlink" title="Series自动对齐、缺失值过滤"></a>Series自动对齐、缺失值过滤</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">ser01 = pd.Series(np.random.randint(1,5,5), index = list('abcde'))ser02 = pd.Series(np.random.randint(1,5,5), index = list('abmne'))print(ser01)print(ser02)print('---------------Series自动对齐-----------------------')mask = ser01 + ser02print(mask)print('---------------Series缺失值过滤---------------------')print(np.isnan(mask))print(mask[~np.isnan(mask)]) #或者 print(mask[mask.notnull()])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>a    2b    2c    2d    4e    3dtype: int64a    4b    3m    4n    3e    3dtype: int64---------------Series自动对齐-----------------------a    6.0b    5.0c    NaNd    NaNe    6.0m    NaNn    NaNdtype: float64---------------Series缺失值过滤---------------------a    Falseb    Falsec     Trued     Truee    Falsem     Truen     Truedtype: boola    6.0b    5.0e    6.0dtype: float64</code></pre><p><br><br><br><br><br></p><h1 id="DataFrame概述"><a href="#DataFrame概述" class="headerlink" title="DataFrame概述"></a>DataFrame概述</h1><h2 id="DataFrame创建-amp-重置索引"><a href="#DataFrame创建-amp-重置索引" class="headerlink" title="DataFrame创建 &amp; 重置索引"></a>DataFrame创建 &amp; 重置索引</h2><h3 id="使用列表创建"><a href="#使用列表创建" class="headerlink" title="使用列表创建"></a>使用列表创建</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">list1 = [[1,2,3,4],[5,6,7,8]]df01 = pd.DataFrame(list1)print(df01.index) # df01的横向索引print(df01.columns) # df01的纵向索引print(df01.values) # df01的值 print('-'*50)print(df01)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>RangeIndex(start=0, stop=2, step=1)RangeIndex(start=0, stop=4, step=1)[[1 2 3 4][5 6 7 8]]--------------------------------------------------   0  1  2  30  1  2  3  41  5  6  7  8</code></pre><h3 id="使用series创建"><a href="#使用series创建" class="headerlink" title="使用series创建"></a>使用series创建</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">ser01 = pd.Series([1,2,3,4])ser02 = pd.Series([5,6,7,8])df = pd.DataFrame([ser01,ser02])df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>   0  1  2  30  1  2  3  41  5  6  7  8</code></pre><h3 id="使用数组创建-1"><a href="#使用数组创建-1" class="headerlink" title="使用数组创建"></a>使用数组创建</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">arr = np.random.randint(1,9,(3,3))df = pd.DataFrame(arr)df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>   0  1  20  1  3  41  3  3  22  3  1  6</code></pre><h3 id="使用字典创建-1"><a href="#使用字典创建-1" class="headerlink" title="使用字典创建"></a>使用字典创建</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">dic = {    'name':['joe','anne','yilianna'],    'age' : [18,19,20],    'class' : 1 #整列数据可以标量填充}df = pd.DataFrame(dic)df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>       name  age  class0       joe   18      11      anne   19      12  yilianna   20      1</code></pre><h3 id="重置索引"><a href="#重置索引" class="headerlink" title="重置索引"></a>重置索引</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">dic = {    'name':['joe','anne','yilianna'],    'age' : [18,19,20],    'class' : 1 #整列数据可以标量填充}df = pd.DataFrame(dic)print(df)print('-'*50)df.index = list('abc') #修改横向索引print(df)print('-'*50)df.columns = list('ABC') #修改纵向索引print(df)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>       name  age  class0       joe   18      11      anne   19      12  yilianna   20      1--------------------------------------------------       name  age  classa       joe   18      1b      anne   19      1c  yilianna   20      1--------------------------------------------------          A   B  Ca       joe  18  1b      anne  19  1c  yilianna  20  1</code></pre><h2 id="增删改查操作"><a href="#增删改查操作" class="headerlink" title="增删改查操作"></a>增删改查操作</h2><h3 id="增删改查列操作"><a href="#增删改查列操作" class="headerlink" title="增删改查列操作"></a>增删改查列操作</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">dic = {    'name':['joe','anne','yilianna'],    'age' : [18,19,20],    'class' : 1 #整列数据可以标量填充}df = pd.DataFrame(dic)print(df)print('---------------列操作 查-----------------------------')print(df['name'])print(df[['name','age']]) #获取多列数据print('---------------列操作 增-----------------------------')df['address'] = ['usa','uk','cn']print(df)print('---------------列操作 删-----------------------------')df.pop('address')print(df)print('---------------列操作 改-----------------------------')df['class'] = [3,4,5]print(df)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>       name  age  class0       joe   18      11      anne   19      12  yilianna   20      1---------------列操作 查-----------------------------0         joe1        anne2    yiliannaName: name, dtype: object       name  age0       joe   181      anne   192  yilianna   20---------------列操作 增-----------------------------       name  age  class address0       joe   18      1     usa1      anne   19      1      uk2  yilianna   20      1      cn---------------列操作 删-----------------------------       name  age  class0       joe   18      11      anne   19      12  yilianna   20      1---------------列操作 改-----------------------------       name  age  class0       joe   18      31      anne   19      42  yilianna   20      5</code></pre><h3 id="增删改查行操作"><a href="#增删改查行操作" class="headerlink" title="增删改查行操作"></a>增删改查行操作</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">dic = {    'name':['joe','anne','yilianna'],    'age' : [18,19,20],    'class' : 1 #整列数据可以标量填充}df = pd.DataFrame(dic)print(df)print('---------------行操作 查-----------------------------')print(df.loc[0])print(df.loc[[0,2]]) # 选择指定行print('-'*20)print(df.loc[0,'name']) # 选择某行某列print(df.loc[[0,2],'name'])print(df.loc[[0,2],['name','age']])print('---------------行操作 切片---------------------------')print(df.loc[1:,'name':'class'])print('---------------数字索引方式获取-----------------------')print(df.iloc[0])print(df.iloc[[0,1],[0,1]])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>       name  age  class0       joe   18      11      anne   19      12  yilianna   20      1---------------行操作 查-----------------------------name     joeage       18class      1Name: 0, dtype: object       name  age  class0       joe   18      12  yilianna   20      1--------------------joe0         joe2    yiliannaName: name, dtype: object       name  age0       joe   182  yilianna   20---------------行操作 切片---------------------------       name  age  class1      anne   19      12  yilianna   20      1---------------数字索引方式获取-----------------------name     joeage       18class      1Name: 0, dtype: object   name  age0   joe   181  anne   19</code></pre><pre class="line-numbers language-lang-python"><code class="language-lang-python">dic = {    'name':['joe','anne','yilianna'],    'age' : [18,19,20],    'class' : 1 #整列数据可以标量填充}df = pd.DataFrame(dic)print(df)print('---------------行操作 增-----------------------')df.loc['3'] = ['ronaldo',16,1]print(df)print('---------------行操作 删-----------------------')df = df.drop('3')print(df)print('---------------行操作 改-----------------------')df.loc[2] = ['messi',19,9]print(df)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>       name  age  class0       joe   18      11      anne   19      12  yilianna   20      1---------------行操作 增-----------------------       name  age  class0       joe   18      11      anne   19      12  yilianna   20      13   ronaldo   16      1---------------行操作 删-----------------------       name  age  class0       joe   18      11      anne   19      12  yilianna   20      1---------------行操作 改-----------------------    name  age  class0    joe   18      11   anne   19      12  messi   19      9</code></pre><p><br><br><br><br><br></p><h1 id="Pandas基本功能"><a href="#Pandas基本功能" class="headerlink" title="Pandas基本功能"></a>Pandas基本功能</h1><h2 id="数据文件读取-文本数据读取与文本存储"><a href="#数据文件读取-文本数据读取与文本存储" class="headerlink" title="数据文件读取/文本数据读取与文本存储"></a>数据文件读取/文本数据读取与文本存储</h2><h3 id="读取csv文件"><a href="#读取csv文件" class="headerlink" title="读取csv文件"></a>读取csv文件</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">data = pd.read_csv('data1.csv')data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="读取文本文件"><a href="#读取文本文件" class="headerlink" title="读取文本文件"></a>读取文本文件</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">data = pd.read_csv('data1.txt',sep = '::',engine = 'python') #这边需要自定义分割符data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="读取Excel文件"><a href="#读取Excel文件" class="headerlink" title="读取Excel文件"></a>读取Excel文件</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">data = pd.read_excel('data1.xlsx')data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="存储文件"><a href="#存储文件" class="headerlink" title="存储文件"></a>存储文件</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">data.to_csv('football.csv',index = False) # 这里的index需要列入 不然会多一列数据<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">df = pd.DataFrame(np.random.randint(1,9,(4,4)),index = list('ABCD'),columns = list('abcd'))df.loc['B','c'] = np.NaNdf.loc['C','b'] = np.NaNprint(df)print('---------------判断是否残缺数据-----------------------')print(df[:].isnull())print('---------------删除带有NaN的行数据--------------------')print(df.dropna()) #默认删除带有NaN的行，只要含有一个就整行删除print('---------------删除带有NaN的列数据--------------------')print(df.dropna(axis = 1))print('---------------自定义删除的数据的阀值------------------')df.loc['E'] = np.NaNprint(df)print(df.dropna(how = 'all')) # 只是删除整行为nan的数据print('---------------filla处理----------------------------')df.loc['E'] = np.NaNdf = df.fillna(0) # 将整行NaN数据替换为0print(df)print('---------------根据前一个值替换-----------------------')df.loc['B','c'] = np.NaNdf.loc['C','b'] = np.NaNprint(df)print('-'*20)df = df.fillna(method = 'ffill') print(df)print('---------------根据后一个值替换-----------------------')df.loc['B','c'] = np.NaNdf.loc['C','b'] = np.NaNprint(df)print('-'*20)df = df.fillna(method = 'bfill') print(df)print('---------------根据列进行替换------------------------')df.loc['B','c'] = np.NaNdf.loc['C','b'] = np.NaNprint(df)print('-'*20)df = df01.fillna({'b':100,'c':200})print(df)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>   a    b    c  dA  6  3.0  2.0  3B  1  8.0  NaN  2C  8  NaN  6.0  8D  7  7.0  1.0  6---------------判断是否残缺数据-----------------------    a      b      c      dA  False  False  False  FalseB  False  False   True  FalseC  False   True  False  FalseD  False  False  False  False---------------删除带有NaN的行数据--------------------   a    b    c  dA  6  3.0  2.0  3D  7  7.0  1.0  6---------------删除带有NaN的列数据--------------------a  dA  6  3B  1  2C  8  8D  7  6---------------自定义删除的数据的阀值------------------    a    b    c    dA  6.0  3.0  2.0  3.0B  1.0  8.0  NaN  2.0C  8.0  NaN  6.0  8.0D  7.0  7.0  1.0  6.0E  NaN  NaN  NaN  NaN    a    b    c    dA  6.0  3.0  2.0  3.0B  1.0  8.0  NaN  2.0C  8.0  NaN  6.0  8.0D  7.0  7.0  1.0  6.0---------------filla处理----------------------------    a    b    c    dA  6.0  3.0  2.0  3.0B  1.0  8.0  0.0  2.0C  8.0  0.0  6.0  8.0D  7.0  7.0  1.0  6.0E  0.0  0.0  0.0  0.0---------------根据前一个值替换-----------------------    a    b    c    dA  6.0  3.0  2.0  3.0B  1.0  8.0  NaN  2.0C  8.0  NaN  6.0  8.0D  7.0  7.0  1.0  6.0E  0.0  0.0  0.0  0.0--------------------    a    b    c    dA  6.0  3.0  2.0  3.0B  1.0  8.0  2.0  2.0C  8.0  8.0  6.0  8.0D  7.0  7.0  1.0  6.0E  0.0  0.0  0.0  0.0---------------根据后一个值替换-----------------------    a    b    c    dA  6.0  3.0  2.0  3.0B  1.0  8.0  NaN  2.0C  8.0  NaN  6.0  8.0D  7.0  7.0  1.0  6.0E  0.0  0.0  0.0  0.0--------------------    a    b    c    dA  6.0  3.0  2.0  3.0B  1.0  8.0  6.0  2.0C  8.0  7.0  6.0  8.0D  7.0  7.0  1.0  6.0E  0.0  0.0  0.0  0.0---------------根据列进行替换------------------------    a    b    c    dA  6.0  3.0  2.0  3.0B  1.0  8.0  NaN  2.0C  8.0  NaN  6.0  8.0D  7.0  7.0  1.0  6.0E  0.0  0.0  0.0  0.0--------------------   a      b      c  dA  6    6.0    8.0  1B  1    2.0  200.0  2C  1  100.0    7.0  1D  6    7.0    2.0  5</code></pre><h2 id="常用统计函数"><a href="#常用统计函数" class="headerlink" title="常用统计函数"></a>常用统计函数</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">df = pd.DataFrame(np.random.randint(1,9,(4,4)),index = list('ABCD'),columns = list('abcd'))print(df)print('---------------count函数------------------------')print(df.count()) #统计非nan的数值print('---------------describe函数---------------------')print(df.describe())print('---------------min函数--------------------------')print(df.min())print('---------------idmin函数------------------------')print(df.idxmin()) #最小的在那一行print('---------------sum函数--------------------------')print(df.sum())print('---------------mad函数--------------------------')print(df.mad()) #根据平均值计算平均绝对距离差print('---------------cumsum函数-----------------------')print(df.cumsum())print('---------------pct_change函数-------------------')print(df.pct_change()) # 计算百分比函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>   a  b  c  dA  4  3  3  4B  5  7  3  8C  4  8  7  5D  4  6  1  4---------------count函数------------------------a    4b    4c    4d    4dtype: int64---------------describe函数---------------------        a         b         c         dcount  4.00  4.000000  4.000000  4.000000mean   4.25  6.000000  3.500000  5.250000std    0.50  2.160247  2.516611  1.892969min    4.00  3.000000  1.000000  4.00000025%    4.00  5.250000  2.500000  4.00000050%    4.00  6.500000  3.000000  4.50000075%    4.25  7.250000  4.000000  5.750000max    5.00  8.000000  7.000000  8.000000---------------min函数--------------------------a    4b    3c    1d    4dtype: int64---------------idmin函数------------------------a    Ab    Ac    Dd    Adtype: object---------------sum函数--------------------------a    17b    24c    14d    21dtype: int64---------------mad函数--------------------------a    0.375b    1.500c    1.750d    1.375dtype: float64---------------cumsum函数-----------------------    a   b   c   dA   4   3   3   4B   9  10   6  12C  13  18  13  17D  17  24  14  21---------------pct_change函数-------------------    a         b         c      dA   NaN       NaN       NaN    NaNB  0.25  1.333333  0.000000  1.000C -0.20  0.142857  1.333333 -0.375D  0.00 -0.250000 -0.857143 -0.200</code></pre><h2 id="相关系数和协方差"><a href="#相关系数和协方差" class="headerlink" title="相关系数和协方差"></a>相关系数和协方差</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python"># 如果协方差为正,说明X,Y同向变化,协方差越大说明同向程度越高;如果协方差# 为负,说明X,Y反向运动,协方差越小说明反向程度越高。df = pd.DataFrame({    'kill' : [5,6,7,8],    'duanwei' : [1,2,3,4]   })df['kill'].cov(df['duanwei'])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.6666666666666665</code></pre><h2 id="唯一值，值计数，成员资格"><a href="#唯一值，值计数，成员资格" class="headerlink" title="唯一值，值计数，成员资格"></a>唯一值，值计数，成员资格</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">ser = pd.Series(np.random.randint(1,5,6),index = list('abcedf'))print(ser)print('---------------唯一值---------------------------')print(ser.unique()) #唯一值print('---------------各个值出现的次数-------------------')print(ser.value_counts())print('---------------某个值是否出现---------------------')print(ser.isin([2,3]))print('---------------某个索引是否出现-------------------')print(ser.index.isin(['a']))print('---------------一些应用--------------------------')df = pd.DataFrame({    'movie_name' : list('abadcebe'),    'rating' : [4,5,3,5,3,4,3,5]})print(df)print('-'*20)print(df['movie_name'].unique())print('-'*20)print(df['movie_name'].value_counts().head(3))print('-'*20)print(df['movie_name'].isin(['a','b']))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>a    1b    2c    1e    2d    3f    2dtype: int64---------------唯一值---------------------------[1 2 3]---------------各个值出现的次数-------------------2    31    23    1dtype: int64---------------某个值是否出现---------------------a    Falseb     Truec    Falsee     Trued     Truef     Truedtype: bool---------------某个索引是否出现-------------------[ True False False False False False]---------------一些应用--------------------------movie_name  rating0          a       41          b       52          a       33          d       54          c       35          e       46          b       37          e       5--------------------[&#39;a&#39; &#39;b&#39; &#39;d&#39; &#39;c&#39; &#39;e&#39;]--------------------a    2b    2e    2Name: movie_name, dtype: int64--------------------0     True1     True2     True3    False4    False5    False6     True7    FalseName: movie_name, dtype: bool</code></pre><h2 id="层次索引"><a href="#层次索引" class="headerlink" title="层次索引"></a>层次索引</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">ser = pd.Series([30,33,35,18,20,30],index = [    [2017,2017,2017,2018,2018,2018],    ['messi','cr7','nermaer','messi','cr7','nermaer']])print(ser)print('---------------索引--------------------------')print(ser[2017]['messi'])print('-'*20)print(ser[:,'messi'])print('---------------交换层次-----------------------')ser = ser.swaplevel().sort_index()print(ser)print('---------------转换为DataFrame---------------')ser = ser.unstack(level = 1)print(ser)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2017  messi      30      cr7        33      nermaer    352018  messi      18      cr7        20      nermaer    30dtype: int64---------------索引--------------------------30--------------------2017    302018    18dtype: int64---------------交换层次-----------------------cr7      2017    33         2018    20messi    2017    30         2018    18nermaer  2017    35         2018    30dtype: int64---------------转换为DataFrame---------------        2017  2018cr7       33    20messi     30    18nermaer   35    30</code></pre><pre class="line-numbers language-lang-python"><code class="language-lang-python">'''    dataframe'''df = pd.DataFrame({    'year' : [2017,2017,2017,2018,2018,2018],    'goal' : [30,30,31,28,29,30],    'name' : ['messi','cr7','nermaer','messi','cr7','nermaer']})print(df)print('---------------set_index函数---------------')df = df.set_index(['year','name'])print(df)print('---------------索引------------------------')  print(df.loc[2017,'messi'])print('-'*20)print(df.loc[2017])print('---------------unstack/stack函数-----------')print(df.unstack())print('-'*20)print(df.stack())print('---------------求和函数---------------------')print(df.sum(level = 'year'))print('-'*20)print(df.sum(level = 'name'))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>   year  goal     name0  2017    30    messi1  2017    30      cr72  2017    31  nermaer3  2018    28    messi4  2018    29      cr75  2018    30  nermaer---------------set_index函数---------------              goalyear name         2017 messi      30     cr7        30     nermaer    312018 messi      28     cr7        29     nermaer    30---------------索引------------------------goal    30Name: (2017, messi), dtype: int64--------------------        goalname         messi      30cr7        30nermaer    31---------------unstack/stack函数-----------    goal              name  cr7 messi nermaeryear                   2017   30    30      312018   29    28      30--------------------year  name         2017  messi    goal    30      cr7      goal    30      nermaer  goal    312018  messi    goal    28      cr7      goal    29      nermaer  goal    30dtype: int64---------------求和函数---------------------    goalyear      2017    912018    87--------------------        goalname         messi      58cr7        59nermaer    61</code></pre><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="sort-index-sort-values排序"><a href="#sort-index-sort-values排序" class="headerlink" title="sort_index/sort_values排序"></a>sort_index/sort_values排序</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">ser = pd.Series([1,2,3,4,5],index = list('bdcae'))df = pd.DataFrame(np.random.randint(1,9,(4,4)),index = list('BDCA'),columns = list('cadb'))print(ser)print('---------------sort_index排序---------------------')print(ser.sort_index(ascending = True))print('-'*20)print(df.sort_index(axis = 1))print('---------------sort_values排序--------------------')print(ser.sort_values(ascending = False))print('-'*20)print(df.sort_values(by = 'c',ascending = False))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>b    1d    2c    3a    4e    5dtype: int64---------------sort_index排序---------------------a    4b    1c    3d    2e    5dtype: int64--------------------   a  b  c  dB  1  6  8  8D  7  7  5  3C  7  7  6  5A  7  4  4  2---------------sort_values排序--------------------e    5a    4c    3d    2b    1dtype: int64--------------------   c  a  d  bB  8  1  8  6C  6  7  5  7D  5  7  3  7A  4  7  2  4</code></pre><h3 id="rank排序"><a href="#rank排序" class="headerlink" title="rank排序"></a>rank排序</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">ser = pd.Series([4,5,2,2,1],index = list('bdcae'))df = pd.DataFrame(np.random.randint(1,9,(4,4)),index = list('BDCA'),columns = list('cadb'))print(ser)print('---------------rank排序---------------------')print(ser.rank())print('-'*20)print(ser.rank(method = 'min'))print('-'*20)print(ser.rank(method = 'max'))print('-'*20)print(ser.rank(method = 'first'))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>b    4d    5c    2a    2e    1dtype: int64---------------rank排序---------------------b    4.0d    5.0c    2.5a    2.5e    1.0dtype: float64--------------------b    4.0d    5.0c    2.0a    2.0e    1.0dtype: float64--------------------b    4.0d    5.0c    3.0a    3.0e    1.0dtype: float64--------------------b    4.0d    5.0c    2.0a    3.0e    1.0dtype: float64</code></pre><h2 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">print(pd.date_range(start = '20180701',end = '20180708',freq = '2d')) # freq默认为一天print('-'*50)print(pd.date_range(start = '20180701',periods = 10, freq = '10min')) # 设定显示条数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>DatetimeIndex([&#39;2018-07-01&#39;, &#39;2018-07-03&#39;, &#39;2018-07-05&#39;, &#39;2018-07-07&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;2D&#39;)--------------------------------------------------DatetimeIndex([&#39;2018-07-01 00:00:00&#39;, &#39;2018-07-01 00:10:00&#39;,            &#39;2018-07-01 00:20:00&#39;, &#39;2018-07-01 00:30:00&#39;,            &#39;2018-07-01 00:40:00&#39;, &#39;2018-07-01 00:50:00&#39;,            &#39;2018-07-01 01:00:00&#39;, &#39;2018-07-01 01:10:00&#39;,            &#39;2018-07-01 01:20:00&#39;, &#39;2018-07-01 01:30:00&#39;],            dtype=&#39;datetime64[ns]&#39;, freq=&#39;10T&#39;)</code></pre><h2 id="数据合并"><a href="#数据合并" class="headerlink" title="数据合并"></a>数据合并</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">df01 = pd.DataFrame({    'data1' : [1,2,3,4,5],    'key'  : list('abcde')})df02 = pd.DataFrame({    'data2' : [1,2,3,4,5],    'key' : list('abcde')})print(df01)print(df02)print('---------------merge合并---------------------')print(pd.merge(df01,df02,on = 'key',how = 'inner')) # inner的意思是说相同的key进行整和<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>   data1 key0      1   a1      2   b2      3   c3      4   d4      5   e   data2 key0      1   a1      2   b2      3   c3      4   d4      5   e---------------merge合并---------------------   data1 key  data20      1   a      11      2   b      22      3   c      33      4   d      44      5   e      5</code></pre><pre class="line-numbers language-lang-python"><code class="language-lang-python">df01 = pd.DataFrame({    'data1' : [1,2,3,4,5],    'key'  : list('abcde')})df02 = pd.DataFrame({    'data2' : [1,2,3,4,5],    'key' : list('abcfg')})print(df01)print(df02)print('---------------merge合并---------------------')print(pd.merge(df01,df02,on = 'key',how = 'inner'))print('-'*20)print(pd.merge(df01,df02,on = 'key',how = 'left'))print('-'*20)print(pd.merge(df01,df02,on = 'key',how = 'right'))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>   data1 key0      1   a1      2   b2      3   c3      4   d4      5   e   data2 key0      1   a1      2   b2      3   c3      4   f4      5   g---------------merge合并---------------------   data1 key  data20      1   a      11      2   b      22      3   c      3--------------------   data1 key  data20      1   a    1.01      2   b    2.02      3   c    3.03      4   d    NaN4      5   e    NaN--------------------   data1 key  data20    1.0   a      11    2.0   b      22    3.0   c      33    NaN   f      44    NaN   g      5</code></pre><pre class="line-numbers language-lang-python"><code class="language-lang-python">df01 = pd.DataFrame({    'data1' : [1,2,3,4,5],    'key1'  : list('abcde')})df02 = pd.DataFrame({    'data2' : [1,2,3,4,5],    'key2' : list('abcfg')})print(df01)print(df02)print('---------------merge合并---------------------')print(pd.merge(df01,df02,left_on = 'key1',right_on = 'key2',how = 'inner'))print('-'*20)print(pd.merge(df01,df02,left_on = 'key1',right_on = 'key2',how = 'left'))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>   data1 key10      1    a1      2    b2      3    c3      4    d4      5    e   data2 key20      1    a1      2    b2      3    c3      4    f4      5    g---------------merge合并---------------------   data1 key1  data2 key20      1    a      1    a1      2    b      2    b2      3    c      3    c--------------------   data1 key1  data2 key20      1    a    1.0    a1      2    b    2.0    b2      3    c    3.0    c3      4    d    NaN  NaN4      5    e    NaN  NaN</code></pre><pre class="line-numbers language-lang-python"><code class="language-lang-python">df01 = pd.DataFrame({    'data1' : [1,2,3,4,5],    'key'  : list('abcde')})df02 = pd.DataFrame({    'data2' : [1,2,3,4,5],    'key' : list('abcfg')})print(df01)print(df02)print('---------------contact合并---------------------')print(pd.concat([df01,df02],join = 'outer')) #纵向合并print('-'*20)print(pd.concat([df01,df02],axis = 1,join = 'outer'))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>   data1 key0      1   a1      2   b2      3   c3      4   d4      5   e   data2 key0      1   a1      2   b2      3   c3      4   f4      5   g---------------contact合并---------------------   data1  data2 key0    1.0    NaN   a1    2.0    NaN   b2    3.0    NaN   c3    4.0    NaN   d4    5.0    NaN   e0    NaN    1.0   a1    NaN    2.0   b2    NaN    3.0   c3    NaN    4.0   f4    NaN    5.0   g--------------------   data1 key  data2 key0      1   a      1   a1      2   b      2   b2      3   c      3   c3      4   d      4   f4      5   e      5   g</code></pre><h2 id="分组聚合"><a href="#分组聚合" class="headerlink" title="分组聚合"></a>分组聚合</h2><p>分组聚合是分组+聚合，即先分组，分完组后再聚合</p><pre class="line-numbers language-lang-python"><code class="language-lang-python">df = pd.DataFrame({    'data1' : [1,2,3,4,5],    'data2' : [10,20,30,40,50],    'key1' : list('aabba'),    'sex'  : list('mwmwm')})print(df)print('---------------分组并查看其内容---------------------')for i in df.groupby('key1'):    print(i)print('---------------聚合函数----------------------------')print(df.groupby('key1')['data1'].mean())print('-'*20)print(df.groupby('key1')['data1'].max())print('--------------apply函数---------------------------')print(df.groupby(['key1','sex'])['data1'].apply(lambda x: x+ 10))print('-'*20)print(df.groupby(['key1','sex'])['data1'].apply(lambda x: x.max()))print('--------------apply函数应用示例---------------------')df = pd.DataFrame(np.random.randint(1,9,(4,4)), index = list('ABCD'),columns = list('abcd'))print(df)print(df.apply(lambda x:x + 10))print('-'*20)def f1(x):    return x * 10print(df.apply(f1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>   data1  data2 key1 sex0      1     10    a   m1      2     20    a   w2      3     30    b   m3      4     40    b   w4      5     50    a   m---------------分组并查看其内容---------------------(&#39;a&#39;,    data1  data2 key1 sex0      1     10    a   m1      2     20    a   w4      5     50    a   m)(&#39;b&#39;,    data1  data2 key1 sex2      3     30    b   m3      4     40    b   w)---------------聚合函数----------------------------key1a    2.666667b    3.500000Name: data1, dtype: float64--------------------key1a    5b    4Name: data1, dtype: int64--------------apply函数---------------------------0    111    122    133    144    15Name: data1, dtype: int64--------------------key1  sexa     m      5      w      2b     m      3      w      4Name: data1, dtype: int64--------------apply函数应用示例---------------------a  b  c  dA  3  1  2  8B  6  1  6  1C  8  8  2  8D  7  2  2  4    a   b   c   dA  13  11  12  18B  16  11  16  11C  18  18  12  18D  17  12  12  14--------------------    a   b   c   dA  30  10  20  80B  60  10  60  10C  80  80  20  80D  70  20  20  40</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Pandas基本数据结构&quot;&gt;&lt;a href=&quot;#Pandas基本数据结构&quot; class=&quot;headerlink&quot; title=&quot;Pandas基本数据结构&quot;&gt;&lt;/a&gt;Pandas基本数据结构&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;pandas中主要的数据结构为Se
      
    
    </summary>
    
      <category term="DL &amp; ML 扩展包" scheme="http://leiy.live/categories/DL-ML-%E6%89%A9%E5%B1%95%E5%8C%85/"/>
    
      <category term="Pandas总结" scheme="http://leiy.live/categories/DL-ML-%E6%89%A9%E5%B1%95%E5%8C%85/Pandas%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Pandas" scheme="http://leiy.live/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>NumPy总结</title>
    <link href="http://leiy.live/2019/03/13/numpy/"/>
    <id>http://leiy.live/2019/03/13/numpy/</id>
    <published>2019-03-13T04:30:03.360Z</published>
    <updated>2018-09-27T08:05:40.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ndarray-N-dimensional-array-的创建"><a href="#ndarray-N-dimensional-array-的创建" class="headerlink" title="ndarray(N-dimensional array)的创建"></a>ndarray(N-dimensional array)的创建</h1><h2 id="通过列表创建"><a href="#通过列表创建" class="headerlink" title="通过列表创建"></a>通过列表创建</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">lis1 = [1,2,3,4]lis2 = [    [1,2,3],    [4,5,6],    [7,8,9]]print(np.array(lis1))print(np.array(lis2))np.array(lis1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1 2 3 4][[1 2 3][4 5 6][7 8 9]]array([1, 2, 3, 4])</code></pre><h2 id="通过元祖创建"><a href="#通过元祖创建" class="headerlink" title="通过元祖创建"></a>通过元祖创建</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">ls = (1,2,3,4)print(np.array(ls))np.array(ls)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[1 2 3 4]array([1, 2, 3, 4])</code></pre><h2 id="通过元祖列表创建"><a href="#通过元祖列表创建" class="headerlink" title="通过元祖列表创建"></a>通过元祖列表创建</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">ls = [(1,2,3,4),(5,6,7,8)]print(np.array(ls))np.array(ls)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[[1 2 3 4][5 6 7 8]]array([[1, 2, 3, 4],    [5, 6, 7, 8]])</code></pre><h2 id="通过zeros-ones-empty-arange-linspace-logspace函数创建"><a href="#通过zeros-ones-empty-arange-linspace-logspace函数创建" class="headerlink" title="通过zeros,ones,empty,arange,linspace,logspace函数创建"></a>通过zeros,ones,empty,arange,linspace,logspace函数创建</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">print('------------------zeros------------------')print(np.zeros(3))print(np.zeros((3,3)))print('-------------------ones------------------')print(np.ones(5))print(np.ones((3,3)))print('------------------empty------------------')print(np.empty(4))print(np.empty((4,4)))print('------------------arange-----------------')print(np.arange(1,5))print(np.arange(1,5,2))print('-----------------linspace----------------')print(np.linspace(1,10,5,endpoint = False)) #endpoint 不包含终值print('-----------------logspace----------------')print(np.logspace(1,2,10)) # 默认按照10为底数 base修改底数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>------------------zeros------------------[0. 0. 0.][[0. 0. 0.][0. 0. 0.][0. 0. 0.]]-------------------ones------------------[1. 1. 1. 1. 1.][[1. 1. 1.][1. 1. 1.][1. 1. 1.]]------------------empty------------------[4.9e-324 9.9e-324 1.5e-323 2.0e-323][[2.48273508e-312 2.05833592e-312 2.05833592e-312 2.29175545e-312][2.07955588e-312 2.14321575e-312 5.98927459e+174 5.58294180e-322][6.91877543e-310 6.91877543e-310 6.48224638e+170 5.22411352e+257][5.74020278e+180 8.37174974e-144 1.41529402e+161 9.16651763e-072]]------------------arange-----------------[1 2 3 4][1 3]-----------------linspace----------------[1.  2.8 4.6 6.4 8.2]-----------------logspace----------------[ 10.          12.91549665  16.68100537  21.5443469   27.8255940235.93813664  46.41588834  59.94842503  77.42636827 100.        ]</code></pre><h2 id="随机生成"><a href="#随机生成" class="headerlink" title="随机生成"></a>随机生成</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">print('----------------生成0~1之间的随机数----------------')print(np.random.random(10)) #生成0~1之间的随机数print('----------------生成二维--------------------------')print(np.random.random((3,3))) #生成二维#生成平均分布的随机数print('----------------生成平均分布的随机数----------------')print(np.random.rand(10))print('----------------生成二维--------------------------')print(np.random.rand(3,3)) #生成二维print('----------------生成正太分布的样本------------------')#生成正太分布的样本print(np.random.randn(10))print(np.random.randn(3,3))print('----------------生成随机整数-----------------------')#生成随机整数print(np.random.randint(1,9,10)) #start stop numprint(np.random.randint(1,9,(4,3,2)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>----------------生成0~1之间的随机数----------------[0.41050443 0.33530101 0.12737482 0.3776622  0.19804841 0.064155370.60792785 0.59201645 0.63366439 0.7994575 ]----------------生成二维--------------------------[[0.63610101 0.59998623 0.24031061][0.59947095 0.88685833 0.91053761][0.16609409 0.07818771 0.09755228]]----------------生成平均分布的随机数----------------[0.45052764 0.33909482 0.49414278 0.91661282 0.39186027 0.766819220.28596852 0.47941687 0.67150723 0.97311004]----------------生成二维--------------------------[[0.57140953 0.33062884 0.02135612][0.49340695 0.06304757 0.62082045][0.85733569 0.371159   0.95531718]]----------------生成正太分布的样本------------------[ 0.4780681  -0.47782185 -0.87592782 -0.47986784  0.61341701 -1.461337980.02491327  0.89073992 -1.33471919  0.66143721][[ 1.21537403 -0.21829338 -2.46902817][-0.55565484 -0.52224036  0.66235131][-2.07846615  0.43426048  0.24828938]]----------------生成随机整数-----------------------[5 2 4 5 1 8 4 4 7 7][[[7 8][8 7][5 3]][[1 4][8 6][1 4]][[6 6][4 2][1 2]][[7 4][4 7][8 3]]]</code></pre><p><br><br><br><br><br></p><h1 id="ndarray对象属性-基本数据类型-reshape操作"><a href="#ndarray对象属性-基本数据类型-reshape操作" class="headerlink" title="ndarray对象属性,基本数据类型,reshape操作"></a>ndarray对象属性,基本数据类型,reshape操作</h1><h2 id="ndarray对象属性"><a href="#ndarray对象属性" class="headerlink" title="ndarray对象属性"></a>ndarray对象属性</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">arr = np.random.randint(1,9,(3,3))print(arr)print('---------------------------')print('ndim:',arr.ndim) #显示数组的轴 print('shape:',arr.shape) #数组的形状print('size:',arr.size) #元素的个数print('dtype:',arr.dtype) #数据类型print('itemsize:',arr.itemsize) #一个字节的位数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[[2 2 8][7 8 8][2 4 6]]---------------------------ndim: 2shape: (3, 3)size: 9dtype: int64itemsize: 8</code></pre><h2 id="ndarray基本数据类型"><a href="#ndarray基本数据类型" class="headerlink" title="ndarray基本数据类型"></a>ndarray基本数据类型</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">lis = [1,2,3]arr = np.array(lis)print(arr)print(arr.dtype)print('-----------------------')lis = [1.1,2,3]arr = np.array(lis)print(arr)print(arr.dtype)print('-----------------------')#手动数据类型lis = [1,2,3]arr = np.array(lis,dtype = np.float) #可以手动指定数据类型print(arr)print(arr.dtype)print('-----------------------')#手动数据类型 简写模式lis = [1,2,3]arr = np.array(lis,dtype = 'i1') #可以手动指定数据类型print(arr)print(arr.dtype)print('-----------------------')lis = [1,2,3]arr = np.array(lis,dtype = 'i1') #可以手动指定数据类型print(arr)print(arr.dtype)arr = arr.astype('i8') # 类型转换print(arr.dtype)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1 2 3]int64-----------------------[1.1 2.  3. ]float64-----------------------[1. 2. 3.]float64-----------------------[1 2 3]int8-----------------------[1 2 3]int8int64</code></pre><h2 id="reshape操作"><a href="#reshape操作" class="headerlink" title="reshape操作"></a>reshape操作</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">arr = np.random.randint(1,9,(2,6))print(arr)print('arr数据维度',(arr.shape))print('-----------------------------------')arr = arr.reshape(4,3)print(arr)print('arr数据维度',(arr.shape))print('-----------------------------------')arr = arr.reshape(3,-1) # -1 系统自动推算print(arr)print('arr数据维度',(arr.shape))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[[1 7 4 2 7 1][1 7 1 3 4 1]]arr数据维度 (2, 6)-----------------------------------[[1 7 4][2 7 1][1 7 1][3 4 1]]arr数据维度 (4, 3)-----------------------------------[[1 7 4 2][7 1 1 7][1 3 4 1]]arr数据维度 (3, 4)</code></pre><p><br><br><br><br><br></p><h1 id="numpy基本操作"><a href="#numpy基本操作" class="headerlink" title="numpy基本操作"></a>numpy基本操作</h1><h2 id="数组与标量、数组之间的运算"><a href="#数组与标量、数组之间的运算" class="headerlink" title="数组与标量、数组之间的运算"></a>数组与标量、数组之间的运算</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">arr1 = np.array([1,2,3,4])arr2 = np.array([2,3,4,5])print('----------------数组和标量的运算---------------------')print(arr + 10)print('----------------数组和数组之间的运算------------------')print(arr1 + arr2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>----------------数组和标量的运算---------------------[11 12 13 14]----------------数组和数组之间的运算------------------[3 5 7 9]</code></pre><h2 id="numpy中的广播功能"><a href="#numpy中的广播功能" class="headerlink" title="numpy中的广播功能"></a>numpy中的广播功能</h2><p>不同维度的在某些情况(满足对应维度上的数量相同)下可以相加 这称为广播功能</p><pre class="line-numbers language-lang-python"><code class="language-lang-python">arr1 = np.random.randint(1,9,(3,3))arr2 = np.random.randint(1,9,(3,1))print(arr1)print('-'*50)print(arr2)print('-'*50)print(arr1 + arr2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[[7 1 4][5 6 2][6 6 2]]--------------------------------------------------[[7][7][1]]--------------------------------------------------[[14  8 11][12 13  9][ 7  7  3]]</code></pre><h2 id="数组的矩阵积"><a href="#数组的矩阵积" class="headerlink" title="数组的矩阵积"></a>数组的矩阵积</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">arr1 = np.random.randint(1,5,(3,3))arr2 = np.random.randint(1,5,(3,2))print(arr1)print('-'*50)print(arr2)print('-'*50)print(arr1.dot(arr2)) # 按照矩阵乘法规则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[[1 1 3][4 4 3][4 3 2]]--------------------------------------------------[[1 4][2 4][1 4]]--------------------------------------------------[[ 6 20][15 44][12 36]]</code></pre><h2 id="数组的索引和切片"><a href="#数组的索引和切片" class="headerlink" title="数组的索引和切片"></a>数组的索引和切片</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">arr1 = np.random.randint(1,9,(4,3,4))print(arr1)print('----------------多维数组的索引------------------')print(arr1[0,1,2]) #numpy里面数组的索引是从外往里切print('----------------多维数组的切片------------------')print(arr1[:,1:3,1:3]) #注意numpy这里是左闭右开区间 print('----------------numpy切片注意------------------')# 特别注意 numpy切片操作获取的是视图，修改数组会影响原来的数组 例子如下x = arr1[0,1,1:3]x[:] = 0print('x =',x)print('arr1 =',arr1) # 注意这边numpy数值的改变<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[[[6 5 2 6][3 7 8 1][3 4 8 3]][[8 5 4 5][3 5 4 2][8 5 4 1]][[5 3 6 2][2 5 2 8][7 1 4 1]][[7 5 2 3][4 3 1 5][3 5 3 5]]]----------------多维数组的索引------------------8----------------多维数组的切片------------------[[[7 8][4 8]][[5 4][5 4]][[5 2][1 4]][[3 1][5 3]]]----------------numpy切片注意------------------x = [0 0]arr1 = [[[6 5 2 6][3 0 0 1][3 4 8 3]][[8 5 4 5][3 5 4 2][8 5 4 1]][[5 3 6 2][2 5 2 8][7 1 4 1]][[7 5 2 3][4 3 1 5][3 5 3 5]]]</code></pre><h2 id="花式索引和布尔索引"><a href="#花式索引和布尔索引" class="headerlink" title="花式索引和布尔索引"></a>花式索引和布尔索引</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python"># 花式索引arr = np.arange(30).reshape(6,5)print(arr)print('----------------花式索引1---------------------------')print(arr[[0,3,5]]) # 这边索引的是0,3,5行print('----------------花式索引2---------------------------')print(arr[np.ix_([0,3,5],[0,1,3])]) # 索引0,3,5行的0,1,3列数据print('----------------Tips-------------------------------')print('通过花式索引获取的新的数组是一个副本,新数组修改不会改变原数组')    x = arr[np.ix_([0,3,5],[0,1,3])]x[:] = 0print('x =',x)print('arr =',arr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[[ 0  1  2  3  4][ 5  6  7  8  9][10 11 12 13 14][15 16 17 18 19][20 21 22 23 24][25 26 27 28 29]]----------------花式索引1---------------------------[[ 0  1  2  3  4][15 16 17 18 19][25 26 27 28 29]]----------------花式索引2---------------------------[[ 0  1  3][15 16 18][25 26 28]]----------------Tips-------------------------------通过花式索引获取的新的数组是一个副本,新数组修改不会改变原数组x = [[0 0 0][0 0 0][0 0 0]]arr = [[ 0  1  2  3  4][ 5  6  7  8  9][10 11 12 13 14][15 16 17 18 19][20 21 22 23 24]</code></pre><pre class="line-numbers language-lang-python"><code class="language-lang-python"># 布尔索引arr = np.array([1,2,3,4,5])condition = [True,True,False,False,True]print(arr[condition])print('----------------布尔索引例子---------------------------')names = np.array(['Leiy','Wuh','Syy'])scores = np.array([    [0,10,20],    [30,40,50],    [60,70,80]])classes = np.array(['语文','数学','英语'])print(scores[names == 'Leiy'])print(names == 'Leiy')print(names == 'Syy')print(scores[(names == 'Leiy') | (names == 'Syy')])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1 2 5]----------------布尔索引例子---------------------------[[ 0 10 20]][ True False False][False False  True][[ 0 10 20][60 70 80]]</code></pre><h2 id="数组的转置与轴对换"><a href="#数组的转置与轴对换" class="headerlink" title="数组的转置与轴对换"></a>数组的转置与轴对换</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">print('----------------.T转置---------------------------')arr = np.random.randint(1,9,(3,4))print(arr.shape)arr = arr.Tprint(arr.shape)print('----------------transpose转置--------------------')arr = np.random.randint(1,9,(3,4,2))print(arr.shape)arr = arr.transpose(1,2,0) #transpose转置是根据传入的编号大小来决定转置的顺序print(arr.shape)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>----------------.T转置---------------------------(3, 4)(4, 3)----------------transpose转置--------------------(3, 4, 2)(4, 2, 3)</code></pre><h2 id="数组的拉伸与合并"><a href="#数组的拉伸与合并" class="headerlink" title="数组的拉伸与合并"></a>数组的拉伸与合并</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python"># 数组的拉伸arr = np.random.randint(1,9,(2,2))print(arr)print('----------------title横向拉伸--------------------')print(np.tile(arr,2)) #横向拉伸两倍print('----------------title横向纵向拉伸-----------------')print(np.tile(arr,(2,3))) #横向拉伸3倍纵向拉伸2倍<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[[3 7][8 5]]----------------title横向拉伸--------------------[[3 7 3 7][8 5 8 5]]----------------title横向纵向拉伸-----------------[[3 7 3 7 3 7][8 5 8 5 8 5][3 7 3 7 3 7][8 5 8 5 8 5]]</code></pre><pre class="line-numbers language-lang-python"><code class="language-lang-python"># 数组的合并a = [1,2,3,4]b = [10,20,30,40]c = [[1,2,3,4],[5,6,7,8]]d = [[10,20,30,40],[50,60,70,80]]print('----------------stack合并数组-----------------')print(np.stack((a,),axis = 0))print(np.stack((a,),axis = 1))print(np.stack((a,b),axis = 0))print(np.stack((a,b),axis = 1))print('---------------vstack合并数组-----------------')print(np.vstack((a,b)))print('---------------hstack合并数组-----------------')  print(np.hstack((a,b)))print(np.hstack((c,d)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>----------------stack合并数组-----------------[[1 2 3 4]][[1][2][3][4]][[ 1  2  3  4][10 20 30 40]][[ 1 10][ 2 20][ 3 30][ 4 40]]---------------vstack合并数组-----------------[[ 1  2  3  4][10 20 30 40]]---------------hstack合并数组-----------------[ 1  2  3  4 10 20 30 40][[ 1  2  3  4 10 20 30 40][ 5  6  7  8 50 60 70 80]]</code></pre><h2 id="通用函数-快速的元素级数组成函数"><a href="#通用函数-快速的元素级数组成函数" class="headerlink" title="通用函数:快速的元素级数组成函数"></a>通用函数:快速的元素级数组成函数</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python"># 一元函数arr = np.array([1,2,3,4,-5])print('---------------绝对值函数-----------------')print(np.abs(arr))print(np.fabs(arr))print('---------------sqrt函数------------------')print(np.sqrt(np.abs(arr)))print('---------------square函数----------------')print(np.square(arr))print('---------------exp函数-------------------')print(np.exp(arr))print('---------------log函数-------------------')print(np.log(np.abs(arr)))print(np.log10(np.abs(arr)))print('---------------向上向下取整----------------')arr = np.array([1.23,5.2,9.7])print(np.ceil(arr))print(np.floor(arr))print('---------------四舍五入--------------------')print(np.rint(arr))print(np.round(arr,2))print('---------------isnan/inf------------------')arr = np.array([1,2,3,np.NaN,4,np.inf])print(arr)print(np.isnan(arr))print(arr[~np.isnan(arr)]) #过滤到nanprint(np.isfinite(arr)) # 有穷的print(np.isinf(arr)) # 无穷的print('---------------三角函数---------------------')print(np.sin([1,2,3,4]))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>---------------绝对值函数-----------------[1 2 3 4 5][1. 2. 3. 4. 5.]---------------sqrt函数------------------[1.         1.41421356 1.73205081 2.         2.23606798]---------------square函数----------------[ 1  4  9 16 25]---------------exp函数-------------------[2.71828183e+00 7.38905610e+00 2.00855369e+01 5.45981500e+016.73794700e-03]---------------log函数-------------------[0.         0.69314718 1.09861229 1.38629436 1.60943791][0.         0.30103    0.47712125 0.60205999 0.69897   ]---------------向上向下取整----------------[ 2.  6. 10.][1. 5. 9.]---------------四舍五入--------------------[ 1.  5. 10.][1.23 5.2  9.7 ]---------------isnan/inf------------------[ 1.  2.  3. nan  4. inf][False False False  True False False][ 1.  2.  3.  4. inf][ True  True  True False  True False][False False False False False  True]---------------三角函数---------------------[ 0.84147098  0.90929743  0.14112001 -0.7568025 ]</code></pre><pre class="line-numbers language-lang-python"><code class="language-lang-python"># 二元函数arr1 = np.random.randint(1,9,5)arr2 = np.random.randint(1,9,5)print(arr1)print(arr2)print('---------------mod函数---------------------')print(np.mod(arr1,arr2)) #mod除法取余print('---------------greater函数-----------------')print(np.greater(arr1,arr2)) #比较大小print('---------------less函数--------------------')print(np.less(arr1,arr2)) #比较大小print('---------------equal函数-------------------')print(np.equal(arr1,arr2)) #比较大小arr1 = np.array([0,1,1,0])arr2 = np.array([1,0,1,0])print('---------------logical_and函数--------------')print(np.logical_and(arr1,arr2))print('---------------logical_or函数---------------')print(np.logical_or(arr1,arr2))print('---------------logical_xor函数--------------')print(np.logical_xor(arr1,arr2))print('---------------powe函数---------------------')print(np.power(arr1,2)) #指数函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[6 7 7 3 5][3 4 4 1 3]---------------mod函数---------------------[0 3 3 0 2]---------------greater函数-----------------[ True  True  True  True  True]---------------less函数--------------------[False False False False False]---------------equal函数-------------------[False False False False False]---------------logical_and函数--------------[False False  True False]---------------logical_or函数---------------[ True  True  True False]---------------logical_xor函数--------------[ True  True False False]---------------powe函数---------------------[0 1 1 0]</code></pre><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">arr = np.random.randint(1,9,(3,3))print(arr)print('-'*50)print('最小值:',arr.min())print('最大值:',arr.max())print('平均值:',arr.mean())print('标准差:',arr.std())print('最小值:',arr.min(axis = 0))print('最小值:',arr.min(axis = 1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[[3 2 1][5 1 5][3 8 7]]--------------------------------------------------最小值: 1最大值: 8平均值: 3.888888888888889标准差: 2.3778816176702997最小值: [3 1 1]最小值: [1 1 3]</code></pre><h2 id="np-where函数"><a href="#np-where函数" class="headerlink" title="np.where函数"></a>np.where函数</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">arr1 = np.array([1,3,5,2,4])arr2 = np.array([2,2,6,3,3])print(arr1)print(arr2)print('-'*50)print(np.where(condition,arr1,arr2)) #类似C语言里面的三元运算符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1 3 5 2 4][2 2 6 3 3]--------------------------------------------------[1 3 6 3 4]</code></pre><h2 id="np-unique函数"><a href="#np-unique函数" class="headerlink" title="np.unique函数"></a>np.unique函数</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">#  去重函数(字面意思)arr = np.random.randint(1,5,9)print(arr)print(np.unique(arr))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[3 4 4 1 2 4 1 3 4][1 2 3 4]</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ndarray-N-dimensional-array-的创建&quot;&gt;&lt;a href=&quot;#ndarray-N-dimensional-array-的创建&quot; class=&quot;headerlink&quot; title=&quot;ndarray(N-dimensional array)的创
      
    
    </summary>
    
      <category term="DL &amp; ML 扩展包" scheme="http://leiy.live/categories/DL-ML-%E6%89%A9%E5%B1%95%E5%8C%85/"/>
    
      <category term="NumPy总结" scheme="http://leiy.live/categories/DL-ML-%E6%89%A9%E5%B1%95%E5%8C%85/NumPy%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="NumPy" scheme="http://leiy.live/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib总结</title>
    <link href="http://leiy.live/2019/03/13/matplotlib/"/>
    <id>http://leiy.live/2019/03/13/matplotlib/</id>
    <published>2019-03-13T04:30:03.345Z</published>
    <updated>2018-08-24T03:21:24.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Matplotlib概述"><a href="#Matplotlib概述" class="headerlink" title="Matplotlib概述"></a>Matplotlib概述</h1><blockquote><p>Python最常用的绘图库,提供了一整套十分适合交互式绘图的命令API,比较方便的就可以将其嵌入到GUI应用程序中。</p></blockquote><p><br><br><br><br><br></p><h1 id="线图"><a href="#线图" class="headerlink" title="线图"></a>线图</h1><h2 id="figure使用"><a href="#figure使用" class="headerlink" title="figure使用"></a>figure使用</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">data = np.arange(-3,3,0.1)x = np.sin(data)y = np.cos(data)# 绘图plt.figure() #plt.figure(figsize = (8,6)) 这边是可以指定画布的大小的plt.plot(data,x)plt.show()plt.figure() #plt.figure(figsize = (8,6)) 这边是可以指定画布的大小的plt.plot(data,y)plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2018/08/24/5b7f71178c03b.png" alt="matplotlib1"></p><h2 id="颜色，标记，线型"><a href="#颜色，标记，线型" class="headerlink" title="颜色，标记，线型"></a>颜色，标记，线型</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">x = [1,3,5]y = [2,4,3]plt.plot(x,y,color = 'r',linestyle = '--',marker = 'o',label = 'x-line')plt.legend()plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2018/08/24/5b7f71e8c89e6.png" alt="matplotlib2"></p><h2 id="刻度，标题，标签，图例"><a href="#刻度，标题，标签，图例" class="headerlink" title="刻度，标题，标签，图例"></a>刻度，标题，标签，图例</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">x = [1,3,5]y = [2,4,3]# 创建图形plt.figure()# 画图plt.plot(x,y,'r--',label = 'x-line')#生成图例plt.legend(loc = 'upper left')#设置标题plt.title('scores')# 设置x，y标签plt.xlabel('x axis')plt.ylabel('y axis')#设置刻度的范围# plt.xlim((1,10))# plt.ylim((1,10))#设置刻度# plt.xticks(np.arange(1,5))# plt.yticks(np.arange(1,10))plt.xticks(np.arange(1,6,1),[str(i) + 'mon'   for i in range(1,6,1)])plt.yticks(np.arange(1,10))# plt.xticks(np.arange(1,6,1),['1mon','2mon','3mon','4mon','5mon','6mon'])# plt.yticks(np.arange(1,10))# 获取坐标轴信息 固定操作ax = plt.gca()ax.spines['right'].set_color(None)ax.spines['top'].set_color(None)plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2018/08/24/5b7f72a8935dd.png" alt="matplotlib3"></p><h2 id="subplot子图"><a href="#subplot子图" class="headerlink" title="subplot子图"></a>subplot子图</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">x1 = [1,3,5]y1 = [2,4,5]x2 = [1,4,5]y2 = [3,2,5]#创建图形plt.figure()plt.subplot(221)plt.plot(x1,y1,'r--')plt.subplot(222)plt.plot(x2,y2,'b--')plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2018/08/24/5b7f734cef302.png" alt="matplotlib4"></p><h2 id="子图面向对象的写法"><a href="#子图面向对象的写法" class="headerlink" title="子图面向对象的写法"></a>子图面向对象的写法</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python">x1 = [1,3,5]y1 = [2,4,5]x2 = [1,4,5]y2 = [3,2,5]#创建图形fig = plt.figure()ax1 = fig.add_subplot(221)ax1.plot(np.random.randn(50).cumsum(),'r--')ax2 = fig.add_subplot(222)ax2.plot(np.random.randn(50).cumsum(),'b--')ax3 = fig.add_subplot(223)ax3.plot(np.random.randn(50).cumsum(),'y--')ax4 = fig.add_subplot(224)ax4.plot(np.random.randn(50).cumsum(),'g--')plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2018/08/24/5b7f73c9d161b.png" alt="matplotlib5"></p><h2 id="subplot子图-1"><a href="#subplot子图-1" class="headerlink" title="subplot子图"></a>subplot子图</h2><pre class="line-numbers language-lang-python"><code class="language-lang-python"># 生成一个figure以及子图列表fig,ax = plt.subplots(2,2) # 2行2列 本质是一个列表for i in range(2):    for j in range(2):        ax[i][j].plot(np.random.randn(50).cumsum(),'r--')plt.savefig('子图')plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2018/08/24/5b7f742b40c02.png" alt="matplotlib6.png"></p><p><br><br><br><br><br></p><h1 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h1><pre class="line-numbers language-lang-python"><code class="language-lang-python"># 设置数据height = np.array([100,200,300,400])# 设置数据标量left = np.arange(1,5,1) # 4 x# 设置柱子宽度n = 4width = 0.8 / n# 创建figureplt.figure()plt.title('City')plt.xlabel('month')plt.ylabel('money')# 画图plt.bar(left,height,width = width,color = 'lightskyblue',align = 'center',label = 'SH') plt.bar(left-width,height + 20,width = width,color = 'red',align = 'center',label = 'BJ') #第一个参数是设定偏移量plt.bar(left+width,height + 10,width = width,color = 'y',align = 'center',label = 'SZ')plt.legend()plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2018/08/24/5b7f75832c50c.png" alt="matplotlib7.png"></p><p><br><br><br><br><br></p><h1 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h1><pre class="line-numbers language-lang-python"><code class="language-lang-python">mu, sigma = 100,15x = np.random.randn(1000) * mu * sigma#绘图plt.figure()plt.hist(x,100,alpha = 0.5,color = 'red') #第二个参数用来设定柱子个数 第三个参数用来设定颜色深浅plt.grid(True) #加上网格plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2018/08/24/5b7f77f013b91.png" alt="matplotlib8.png"></p><p><br><br><br><br><br></p><h1 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h1><pre class="line-numbers language-lang-python"><code class="language-lang-python"># 设置数据x = np.random.randn(1000)y = np.random.randn(1000)# plt.scatter(x,y)# plt.scatter(x,y,c = np.random.rand(1000))# plt.scatter(x,y,c = np.random.rand(1000),s = np.random.rand(1000) * 50)plt.scatter(x,y,c = np.random.rand(1000),s = np.random.rand(1000) * 50,alpha = 0.8)plt.title('money')plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2018/08/24/5b7f78ba64bd6.png" alt="matplotlib9.png"></p><p><br><br><br><br><br></p><h1 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h1><pre class="line-numbers language-lang-python"><code class="language-lang-python"># 设置数据x = [15,25,30,30]#设置颜色color = ['r','yellow','green','blue']#设置每一块离开中心的距离explode = [0.2,0,0,0]#每一块的文字说明labels = ['yule','shenghuo','grilfriend','game']plt.figure()# 绘制饼图plt.pie(x,explode = explode,labels = labels, colors = color,startangle = 90,shadow = True ,labeldistance = 1.2,autopct = '%.1f%%')plt.title('money')# 设置圆图plt.axis('equal')plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2018/08/24/5b7f7948c281d.png" alt="matplotlib10.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Matplotlib概述&quot;&gt;&lt;a href=&quot;#Matplotlib概述&quot; class=&quot;headerlink&quot; title=&quot;Matplotlib概述&quot;&gt;&lt;/a&gt;Matplotlib概述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Python最常用的绘图库,提供了
      
    
    </summary>
    
      <category term="DL &amp; ML 扩展包" scheme="http://leiy.live/categories/DL-ML-%E6%89%A9%E5%B1%95%E5%8C%85/"/>
    
      <category term="Matplotlib总结" scheme="http://leiy.live/categories/DL-ML-%E6%89%A9%E5%B1%95%E5%8C%85/Matplotlib%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Matplotlib" scheme="http://leiy.live/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法之公式编辑</title>
    <link href="http://leiy.live/2019/03/13/Markdown(2)/"/>
    <id>http://leiy.live/2019/03/13/Markdown(2)/</id>
    <published>2019-03-13T04:30:03.329Z</published>
    <updated>2018-08-22T15:59:40.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MathJax引擎配置"><a href="#MathJax引擎配置" class="headerlink" title="MathJax引擎配置"></a>MathJax引擎配置</h1><p>首先我们选用MathJax引擎，插入以下代码至你要编辑的MD文件中</p><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;</code></pre><p>由于我的博客采用的是 hexo+next 的框架，所以关于hexo下配置MathJax引擎的详情可以<a href="https://ranmaosong.github.io/2017/11/29/hexo-support-mathjax/" target="_blank" rel="noopener">点这里</a></p><h1 id="Markdown公式插入方式"><a href="#Markdown公式插入方式" class="headerlink" title="Markdown公式插入方式"></a>Markdown公式插入方式</h1><h2 id="行间插入"><a href="#行间插入" class="headerlink" title="行间插入"></a>行间插入</h2><pre><code>  格式: $$ (此处插入公式) $$</code></pre><p>行间插入的意思是公式单独占一行，不予其他文字混淆</p><h2 id="行内插入"><a href="#行内插入" class="headerlink" title="行内插入"></a>行内插入</h2><pre><code>  格式: \\( 此处插入公式 \\)</code></pre><p>行内插入的意思与行间插入刚好相反</p><h1 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h1><p>在这里先强势安利一波Latex在线编辑器<a href="https://www.mathcha.io/" target="_blank" rel="noopener">Mathcha</a>这款在线Latex编辑器不仅可以让你在不了解Latex书写规则的情况下编写出公式还可以编辑图表于绘图</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>通过 ‘\’ 键快速调出Mathcha的Show Suggestion Box按钮<br>具体的教学视频<a href="https://www.youtube.com/watch?v=ff0H6w561z8" target="_blank" rel="noopener">Mathcha教学视频</a></p><pre><code>$$f( x) \ =\ \left[\frac{a\ +\ b}{c}\right] +\int ^{2}_{1} x^{2}$$</code></pre><script type="math/tex; mode=display">f( x) \ =\ \left[\frac{a\ +\ b}{c}\right] +\int ^{2}_{1} x^{2}</script><p><br></p><pre><code>$$f(x) \ =\ \begin{cases} 10 &amp; x&lt; 20\\\19 &amp; x\geq 20\end{cases}$$</code></pre><script type="math/tex; mode=display">f(x) \ =\ \begin{cases}10 & x< 20\\\19 & x\geq 20\end{cases}</script><p><br></p><pre><code>$$A\ =\ \begin{bmatrix}1 &amp; 2 &amp; 3\\\4 &amp; 5 &amp; 6\\\7 &amp; 8 &amp; 9\end{bmatrix}$$</code></pre><script type="math/tex; mode=display">A\ =\ \begin{bmatrix}1 & 2 & 3\\\4 & 5 & 6\\\7 & 8 & 9\end{bmatrix}</script><p>好啦！ 到现在你已经学会怎么使用Latex在线编辑器在Markdown里编辑公式了，赶快试试吧！</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://ranmaosong.github.io/2017/11/29/hexo-support-mathjax/" target="_blank" rel="noopener">如何在hexo中支持Mathjax</a><br><a href="http://doraemonzzz.com/2018/05/15/Hexo%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">Hexo博客next主题数学公式渲染问题</a><br><a href="https://juejin.im/post/5a6721bd518825733201c4a2" target="_blank" rel="noopener">MarkDown 插入数学公式实验大集合</a><br><a href="https://magicly.me/markdown-math/" target="_blank" rel="noopener">在markdown里如何写数学公式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MathJax引擎配置&quot;&gt;&lt;a href=&quot;#MathJax引擎配置&quot; class=&quot;headerlink&quot; title=&quot;MathJax引擎配置&quot;&gt;&lt;/a&gt;MathJax引擎配置&lt;/h1&gt;&lt;p&gt;首先我们选用MathJax引擎，插入以下代码至你要编辑的MD文件中&lt;
      
    
    </summary>
    
      <category term="Markdown语法" scheme="http://leiy.live/categories/Markdown%E8%AF%AD%E6%B3%95/"/>
    
      <category term="Markdown语法之公式编辑" scheme="http://leiy.live/categories/Markdown%E8%AF%AD%E6%B3%95/Markdown%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%85%AC%E5%BC%8F%E7%BC%96%E8%BE%91/"/>
    
    
      <category term="Markdown" scheme="http://leiy.live/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法之基本语法</title>
    <link href="http://leiy.live/2019/03/13/Markdown(1)/"/>
    <id>http://leiy.live/2019/03/13/Markdown(1)/</id>
    <published>2019-03-13T04:30:03.314Z</published>
    <updated>2018-08-22T15:59:05.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown标题设置"><a href="#Markdown标题设置" class="headerlink" title="Markdown标题设置"></a>Markdown标题设置</h1><p>Markdown标题的设置通过设置 # 的个数来确定而 # 个数的范围是 1～6</p><pre><code>    # 一级标题    ## 二级标题    ### 三级标题    #### 四级标题    ##### 五级标题    ###### 六级标题    ps: # 和标题中间有空格</code></pre><h3 id="标题效果展示"><a href="#标题效果展示" class="headerlink" title="标题效果展示"></a>标题效果展示</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p><br><br><br><br><br></p><h1 id="Markdown列表设置"><a href="#Markdown列表设置" class="headerlink" title="Markdown列表设置"></a>Markdown列表设置</h1><pre><code>    ### 无序列表    * 1    * 2    * 3     ### 有序列表    1. 1    2. 2    3. 3</code></pre><h3 id="列表效果展示"><a href="#列表效果展示" class="headerlink" title="列表效果展示"></a>列表效果展示</h3><p>有序列表</p><ol><li>1</li><li>2</li><li>3</li></ol><p>无序列表</p><ul><li>1 </li><li>2</li><li>3 </li></ul><p><br><br><br><br><br></p><h1 id="Markdown引用"><a href="#Markdown引用" class="headerlink" title="Markdown引用"></a>Markdown引用</h1><pre><code>&gt; 这里是引用 注意文本和符号之间的空格</code></pre><h3 id="引用效果展示"><a href="#引用效果展示" class="headerlink" title="引用效果展示"></a>引用效果展示</h3><blockquote><p>这里是引用 注意文本和符号之间的空格</p></blockquote><p><br><br><br><br><br></p><h1 id="Markdown换行"><a href="#Markdown换行" class="headerlink" title="Markdown换行"></a>Markdown换行</h1><pre><code>Markdown中使用换行使用 &lt;br&gt; 实现</code></pre><h3 id="换行效果展示"><a href="#换行效果展示" class="headerlink" title="换行效果展示"></a>换行效果展示</h3><blockquote><p>引用1<br>引用2<br>引用3</p></blockquote><p><br><br><br><br><br></p><h1 id="图片和超链接"><a href="#图片和超链接" class="headerlink" title="图片和超链接"></a>图片和超链接</h1><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><pre><code>Markdown中插入超链接的格式为  [link text](URL &#39;title text&#39;)如：[Baidu](http://www.baidu.com)</code></pre><h3 id="超链接效果展示"><a href="#超链接效果展示" class="headerlink" title="超链接效果展示"></a>超链接效果展示</h3><p><a href="http://www.baidu.com" target="_blank" rel="noopener">Baidu</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><pre><code>Markdown中插入图片于超链接类似 只不过前面多了 ！格式为 ！[link text](URL &#39;title text&#39;)建议使用sm.ms生成图片url 网站为 https://sm.ms/如：  ![姚贝娜](https://i.loli.net/2018/08/12/5b700577810ed.jpg)</code></pre><h3 id="图片效果展示"><a href="#图片效果展示" class="headerlink" title="图片效果展示"></a>图片效果展示</h3><p><img src="https://i.loli.net/2018/08/12/5b700577810ed.jpg" alt="姚贝娜"></p><p><br><br><br><br><br></p><h1 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h1><pre><code>*这里是斜体 *  &lt;br&gt;**这里是粗体** &lt;br&gt;***这里是粗斜体***</code></pre><h3 id="粗体与斜体效果展示"><a href="#粗体与斜体效果展示" class="headerlink" title="粗体与斜体效果展示"></a>粗体与斜体效果展示</h3><p><em>这里是斜体 </em><br><strong>这里是粗体</strong><br><strong><em>这里是粗斜体</em></strong><br><br><br><br><br><br></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><pre><code>表格的生成在Markdown中比较麻烦！:--- 代表左对齐:--: 代表居中对齐---: 代表右对齐| Tables        | Are           | Cool  || ------------- |:-------------:| -----:|| col 3 is      | right-aligned | $1600 || col 2 is      | centered      |   $12 || zebra stripes | are neat      |    $1 |</code></pre><h3 id="表格效果展示"><a href="#表格效果展示" class="headerlink" title="表格效果展示"></a>表格效果展示</h3><div class="table-container"><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table></div><p><br><br><br><br><br></p><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><pre><code>这就是 ~~删除线~~</code></pre><h3 id="删除线效果展示"><a href="#删除线效果展示" class="headerlink" title="删除线效果展示"></a>删除线效果展示</h3><p>这就是 <del>删除线</del><br><br><br><br><br><br></p><h1 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h1><pre><code>在Markdown中插入代码框使用的是六个`(esc下面1左面的按键) 代码处于三个`的中间</code></pre><h3 id="代码框效果展示"><a href="#代码框效果展示" class="headerlink" title="代码框效果展示"></a>代码框效果展示</h3><pre class="line-numbers language-lang-c"><code class="language-lang-c">    void main()        {            print('Hello World!')        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br><br></p><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><pre><code>    分割线使用三个星号    如： ***</code></pre><h3 id="分割线效果展示"><a href="#分割线效果展示" class="headerlink" title="分割线效果展示"></a>分割线效果展示</h3><hr><p><br><br><br></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://xianbai.me/learn-md/index.html" target="_blank" rel="noopener">Markdown入门参考</a><br><a href="https://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="noopener">Markdown入门指南</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markdown标题设置&quot;&gt;&lt;a href=&quot;#Markdown标题设置&quot; class=&quot;headerlink&quot; title=&quot;Markdown标题设置&quot;&gt;&lt;/a&gt;Markdown标题设置&lt;/h1&gt;&lt;p&gt;Markdown标题的设置通过设置 # 的个数来确定而 # 
      
    
    </summary>
    
      <category term="Markdown语法" scheme="http://leiy.live/categories/Markdown%E8%AF%AD%E6%B3%95/"/>
    
      <category term="Markdown语法之基本语法" scheme="http://leiy.live/categories/Markdown%E8%AF%AD%E6%B3%95/Markdown%E8%AF%AD%E6%B3%95%E4%B9%8B%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="Markdown" scheme="http://leiy.live/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>高效阅读英文文献思维和方法</title>
    <link href="http://leiy.live/2019/03/13/live-%E9%AB%98%E6%95%88%E9%98%85%E8%AF%BB%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%80%9D%E7%BB%B4%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    <id>http://leiy.live/2019/03/13/live-高效阅读英文文献思维和方法/</id>
    <published>2019-03-13T04:30:03.314Z</published>
    <updated>2018-10-20T06:32:58.956Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/10/20/5bcaad10a5241.png" alt="image01.png"></p><h1 id="阅读目的"><a href="#阅读目的" class="headerlink" title="阅读目的"></a>阅读目的</h1><ul><li>整体上了解方向知识(起步求稳扎实)<ul><li>教材(英文)</li><li>学位论文(引言)</li></ul></li><li>提炼科研想法<ul><li>科研好像法的诞生</li></ul></li><li>寻找目标方法<ul><li>Research Methodology<ul><li>Experiental/Materials and Methods</li><li>Approach/Methodology</li><li>Theoretical and Computational Details</li></ul></li></ul></li><li>寻找国际同行<ul><li>查询作者信息和作者单位,引用量</li><li>论文数量</li></ul></li><li>找同类研究<ul><li>搜索相关的内容，比较同类研究和不同和相似</li></ul></li><li><strong>调查期刊影响力和同行期刊</strong><ul><li>期刊审稿时间 投稿到收录时间很短表明是主审稿人邀请某个人写的通常质量比较高</li><li>期刊排名和影响因子</li><li>查看同行期刊(webofscience)</li></ul></li><li>提高英语词汇量和写作能力</li><li>入门专业知识</li></ul><h1 id="如何判断-筛选和整理论文"><a href="#如何判断-筛选和整理论文" class="headerlink" title="如何判断,筛选和整理论文"></a>如何判断,筛选和整理论文</h1><ul><li><strong>文献管理软件</strong><ul><li>将有限的时间花在前期判断,筛选上</li><li>电子版文件夹管理和打印版阅读记笔记</li></ul></li><li><strong>实用思维和步骤</strong><ul><li><strong>优化和缩小范围</strong><ul><li>不断增加搜索约束,缩小搜索范围</li></ul></li><li><strong>判断内容相关度和论文质量</strong><br>   <img src="https://i.loli.net/2018/10/20/5bcabe072b01a.png" alt="image02.png"><ul><li>找到那种让你wow的论文       </li></ul></li><li>精读和泛读,并下载</li><li>标注题目,发表年份和精读泛读,并分类</li><li>打印并归类精读论文,先精读,后续再增加泛读论文</li></ul></li></ul><h1 id="阅读的方法和技巧"><a href="#阅读的方法和技巧" class="headerlink" title="阅读的方法和技巧"></a>阅读的方法和技巧</h1><h2 id="如何阅读和参考教材"><a href="#如何阅读和参考教材" class="headerlink" title="如何阅读和参考教材?"></a><strong>如何阅读和参考教材?</strong></h2><ul><li><strong>确保高质量</strong></li><li><strong>作者信息</strong></li><li><strong>目录Contents</strong></li><li>Subject Index + 知识百科</li><li>基本概念和成熟方法</li><li>不成熟的研究成果？</li><li><strong>较真程度: 教材 &lt; 论文</strong><h2 id="如何奠定高效和快速阅读的基础"><a href="#如何奠定高效和快速阅读的基础" class="headerlink" title="如何奠定高效和快速阅读的基础?"></a><strong>如何奠定高效和快速阅读的基础?</strong></h2></li><li>拒绝水文</li><li><strong>有效筛选文章</strong></li><li>合理安排阅读顺序,根据目的选择性阅读</li><li>只有精读,才能浮想联翩</li><li><strong>辐射阅读</strong></li><li>交流论文内容</li><li><p>做一点尝试性模仿研究</p><h2 id="有效整理笔记和整理内容"><a href="#有效整理笔记和整理内容" class="headerlink" title="有效整理笔记和整理内容?"></a><strong>有效整理笔记和整理内容?</strong></h2><p><img src="https://i.loli.net/2018/10/20/5bcac7ec8815c.png" alt="image03.png"></p><p><img src="https://i.loli.net/2018/10/20/5bcac6578a77b.png" alt="image04.png"></p><h2 id="如何开展阅读总结-反思和提问"><a href="#如何开展阅读总结-反思和提问" class="headerlink" title="如何开展阅读总结,反思和提问?"></a><strong>如何开展阅读总结,反思和提问?</strong></h2><ul><li>读文章四个层次 理解,质疑,总结,提炼<br><img src="https://i.loli.net/2018/10/20/5bcac78273fdd.png" alt="image05.png"><br><img src="https://i.loli.net/2018/10/20/5bcac84d6f6fd.png" alt="image06.png">    <h2 id="如何提高阅读论文速度和效率"><a href="#如何提高阅读论文速度和效率" class="headerlink" title="如何提高阅读论文速度和效率?"></a><strong>如何提高阅读论文速度和效率?</strong></h2></li><li><strong>比起速度,理解内容更重要！！</strong><br><img src="https://i.loli.net/2018/10/20/5bcac8dc88f19.png" alt="image07.png"><br><img src="https://i.loli.net/2018/10/20/5bcac9578b5a0.png" alt="image08.png"></li></ul></li></ul><h2 id="如何构建自己的研究体系"><a href="#如何构建自己的研究体系" class="headerlink" title="如何构建自己的研究体系?"></a><strong>如何构建自己的研究体系?</strong></h2><ul><li><strong>懂得站在巨人的肩膀上</strong><br><img src="https://i.loli.net/2018/10/20/5bcaca83dfb24.png" alt="image09.png"></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>看不懂数学公式 1.对应的教材  2.看论文的目的 如果目的不是了解方程的推导</li><li>遇到不会的单词必须查,查多了才会有理解</li><li>使用 1.谷歌 hot research topic 2.综述论文 3.国际会议 4.导师 5.webofscience 查找前沿热点</li><li>使用英文去查找英文的意思</li><li>‘*’代表和crack相关的词</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/10/20/5bcaad10a5241.png&quot; alt=&quot;image01.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;阅读目的&quot;&gt;&lt;a href=&quot;#阅读目的&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="知乎live" scheme="http://leiy.live/categories/%E7%9F%A5%E4%B9%8Elive/"/>
    
      <category term="高效阅读英文文献思维和方法" scheme="http://leiy.live/categories/%E7%9F%A5%E4%B9%8Elive/%E9%AB%98%E6%95%88%E9%98%85%E8%AF%BB%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E6%80%9D%E7%BB%B4%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="英文文献" scheme="http://leiy.live/tags/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE/"/>
    
  </entry>
  
  <entry>
    <title>建立专属的时间管理系统</title>
    <link href="http://leiy.live/2019/03/13/live-%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    <id>http://leiy.live/2019/03/13/live-时间管理/</id>
    <published>2019-03-13T04:30:03.298Z</published>
    <updated>2018-10-19T02:58:53.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础—-时间管理的好方法"><a href="#基础—-时间管理的好方法" class="headerlink" title="基础—-时间管理的好方法"></a>基础—-时间管理的好方法</h1><ul><li>任务前:to do list</li><li>任务中:番茄工作法</li><li>任务后:时间记录法</li></ul><h2 id="任务前"><a href="#任务前" class="headerlink" title="任务前"></a>任务前</h2><ul><li>选取合适的时间步长,列出明天的计划</li><li>使用四像限工作法</li><li>适量适度原则:依照对自己的评估制定计划</li></ul><p><img src="https://i.loli.net/2018/09/24/5ba8c8e940eb3.png" alt="四像限工作法.png"></p><h2 id="任务中"><a href="#任务中" class="headerlink" title="任务中"></a>任务中</h2><ul><li>灵活处理</li><li>寻找适合自己的番茄工作时间</li><li>因任务而异，番茄工作法容易拆分，有明确的目标和界定任务</li></ul><h2 id="任务后"><a href="#任务后" class="headerlink" title="任务后"></a>任务后</h2><ul><li>记录纯粹工作时间</li><li>记录精准</li><li>适合自己而非追求完美和完善</li></ul><h1 id="提升—-专注力管理"><a href="#提升—-专注力管理" class="headerlink" title="提升—-专注力管理"></a>提升—-专注力管理</h1><ul><li>注重输出能力</li><li>成就感和挫败感的平衡</li><li>分配专注力</li></ul><h2 id="注重输出能力"><a href="#注重输出能力" class="headerlink" title="注重输出能力"></a>注重输出能力</h2><ul><li>费曼学习法 <blockquote><p>1.选择一个概念<br>2.想象你正要把这个概念教给一个新生<br>3.如果遇到问题原路返回，<br>4.简化你的描述语言，或者创建一个类比，以便让别人更好的理解。</p></blockquote></li><li>费慢学习法拓展<blockquote><p>1.回忆整本书脉络，思路，论证过程。作者让你最佩服的地方是什么？如果让你来写，你会怎么写？<br>2.看过一篇paper能不能写出文件综述，思维导图。</p></blockquote></li></ul><h2 id="成就感和挫败感的平衡"><a href="#成就感和挫败感的平衡" class="headerlink" title="成就感和挫败感的平衡"></a>成就感和挫败感的平衡</h2><ul><li>按照自己专心做事的时候的能力制定，这样是一个比较高的要求，因此你会相对的觉得自己‘努力就可以完成’</li></ul><h2 id="分配专注力"><a href="#分配专注力" class="headerlink" title="分配专注力"></a>分配专注力</h2><ul><li>处理专注力和四象限的冲突</li><li>不要奢望完成专注力和实际差距太大的事情，选择合适的任务</li><li>在每天to do list中调整，总结经验</li><li>学会专注力排序<br><img src="https://i.loli.net/2018/09/24/5ba8cd64f32fa.png" alt="专注力.png"></li></ul><h2 id="实践中的方法"><a href="#实践中的方法" class="headerlink" title="实践中的方法"></a>实践中的方法</h2><ul><li>如何将好奇心变为能力培养？<blockquote><p>能力培养——信息收集、处理和输出的能力</p></blockquote></li><li>如何度过艰难时刻？<blockquote><p>克服恶性循环，把计划难度降低，但并不完全抛弃计划</p></blockquote></li><li>任务被打断怎么办？<blockquote><p>四象限原则 + 使用书签和收藏</p></blockquote></li></ul><h1 id="优化—-如何利用碎片花时间"><a href="#优化—-如何利用碎片花时间" class="headerlink" title="优化—-如何利用碎片花时间"></a>优化—-如何利用碎片花时间</h1><ul><li>简单任务优先原则</li><li>利用环境优势</li><li>精力碎片下，多做整合和回忆类任务</li></ul><h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><p>问:听了一天课，没什么收获<br>答:整理思绪，一小时回顾，遗忘曲线</p><p>问:工作后留给自己的时间少了很多，如何利用回家后不够多的时间得到一些需要系统学习才能达成的知识？<br>答:筛选最需要的，搞清主要矛盾，不要对速成抱有太大的希望</p><p>处理事件任务制方式，并非时间制</p><p>crush course</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.zhihu.com/lives/769214248550166528" target="_blank" rel="noopener">建立专属的时间管理系统</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础—-时间管理的好方法&quot;&gt;&lt;a href=&quot;#基础—-时间管理的好方法&quot; class=&quot;headerlink&quot; title=&quot;基础—-时间管理的好方法&quot;&gt;&lt;/a&gt;基础—-时间管理的好方法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;任务前:to do list&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="知乎live" scheme="http://leiy.live/categories/%E7%9F%A5%E4%B9%8Elive/"/>
    
      <category term="建立专属的时间管理系统" scheme="http://leiy.live/categories/%E7%9F%A5%E4%B9%8Elive/%E5%BB%BA%E7%AB%8B%E4%B8%93%E5%B1%9E%E7%9A%84%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="时间管理" scheme="http://leiy.live/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>患上[努力焦虑症]，怎么办？</title>
    <link href="http://leiy.live/2019/03/13/live-%E6%82%A3%E4%B8%8A%E5%8A%AA%E5%8A%9B%E7%84%A6%E8%99%91%E7%97%87/"/>
    <id>http://leiy.live/2019/03/13/live-患上努力焦虑症/</id>
    <published>2019-03-13T04:30:03.282Z</published>
    <updated>2018-10-20T01:56:21.959Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/10/20/5bca842e59d8a.jpg" alt="焦虑.jpg"></p><h1 id="三种努力"><a href="#三种努力" class="headerlink" title="三种努力"></a>三种努力</h1><ul><li>为了目标而努力  </li><li>追求努力的状态的努力 努力是一种自我辩解 营造在路上的感觉 ！！！</li><li>追求努力的感觉的努力</li></ul><p><strong>前者非常清楚自己的目标和努力的关系后两者并不清楚,不要营造一种努力的假象,你只是看起来很努力</strong></p><h1 id="焦虑的本质和努力背后的动机"><a href="#焦虑的本质和努力背后的动机" class="headerlink" title="焦虑的本质和努力背后的动机"></a>焦虑的本质和努力背后的动机</h1><p>对不能控制的东西比较鸡血 对能控制的东西比较丧<br>对不能控制的东西顺其自然 对能控制的东西更为精进<br>而真正的努力需要同时把握<br>焦虑本本质是一种失控对能控制的东西不上进 对不能控制的领域强行控制<br><strong>那些大的目标并不是用来实现的而是用来缓解焦虑，想要缓解焦虑这些目标就必须远大，可这些目标并不是用来实现，了解焦虑的来源</strong></p><h1 id="持续的努力是如何维持的？"><a href="#持续的努力是如何维持的？" class="headerlink" title="持续的努力是如何维持的？"></a>持续的努力是如何维持的？</h1><ul><li>忘我，沉浸在追求目标的过程，呈现出一种福流的状态，沉浸在自己所能够控制的事物中,介于一种持续追求目标，却又不看重目标的状态</li></ul><h1 id="什么是努力的正确姿势？"><a href="#什么是努力的正确姿势？" class="headerlink" title="什么是努力的正确姿势？"></a>什么是努力的正确姿势？</h1><ul><li>真实的努力需要你盯着你能做的事情而不是那些你不能控制的事情,多去思考那些你能够控制的事情，而不是强行控制那些你做不了的事情</li><li>行动的努力，控制能控制的事情</li><li>一次只是制定一个目标</li><li><strong>真正有效的计划是控制，每一个不可控的东西都有可控的成分存在,把这些真正可控的东西做成计划，计划无法让你增加控制感，这就不是一个好的计划</strong></li><li><strong>真正的努力是控制我所能够控制的接纳我所控制不了的,从感受上，因为专注于此时此地的东西，它能制造更多的福流。从思维上，它看到的是能做的事情，而不是盯着不能做的事情。从行动上，通过做那些能控制的部分，来把事情往前推进。</strong></li></ul><h1 id="忠告"><a href="#忠告" class="headerlink" title="忠告"></a>忠告</h1><ul><li>不要总去回想你不能控制的过去，多想想你能控制的未来，<strong>活在当下</strong></li><li>学会选择面对苦难的选择</li><li>生活是为了工作还是工作是为了生活</li><li>不需要向别人证明你自己，只需要向自己证明你自己</li><li><strong>不要制定那种只要一停下来就觉得失败了的那种目标，多制定那种只要做一次就觉得自己成功了的那种目标，比如一周跑一次步</strong></li><li><strong>制定计划要在自己可控的范围之内，盲目的制定很多不可控的东西只是为了缓解你的焦虑，提供给你进步的幻想。</strong></li><li>如何完成多个目标？学会在一段时间内只有一个目标</li><li>知识和技能积累需要时间根植于真实</li></ul><p><img src="https://i.loli.net/2018/10/20/5bca8a43d1e50.jpg" alt="assj.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/10/20/5bca842e59d8a.jpg&quot; alt=&quot;焦虑.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;三种努力&quot;&gt;&lt;a href=&quot;#三种努力&quot; class=&quot;headerlink&quot; title=&quot;三种努力
      
    
    </summary>
    
      <category term="知乎live" scheme="http://leiy.live/categories/%E7%9F%A5%E4%B9%8Elive/"/>
    
      <category term="患上[努力焦虑症]，怎么办？" scheme="http://leiy.live/categories/%E7%9F%A5%E4%B9%8Elive/%E6%82%A3%E4%B8%8A-%E5%8A%AA%E5%8A%9B%E7%84%A6%E8%99%91%E7%97%87-%EF%BC%8C%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/"/>
    
    
      <category term="时间管理" scheme="http://leiy.live/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>如何开展高质量英文文献调研</title>
    <link href="http://leiy.live/2019/03/13/live-%E5%A6%82%E4%BD%95%E5%BC%80%E5%B1%95%E9%AB%98%E8%B4%A8%E9%87%8F%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E8%B0%83%E7%A0%94/"/>
    <id>http://leiy.live/2019/03/13/live-如何开展高质量英文文献调研/</id>
    <published>2019-03-13T04:30:03.282Z</published>
    <updated>2018-10-19T09:21:23.549Z</updated>
    
    <content type="html"><![CDATA[<p>问:作为本科生，对本领域的专业词汇还不甚熟悉，因为不清楚中文表达对应的地道英文表述，文献搜索效率也大大降低，请问如何解决该问题？<br>答: 1.找专业英文教材 2.综述英文论文 3.专业学术翻译软件(中国知网学术翻译) </p><p>问:老师您好，我是 作为人工智能基础研究岗位的从业者，想请教您几个问题：1. 如何通过读论文构建自己在某个领域的知识树。2. 如何通过梳理自己对某个领域学者关系脉络的认识。3. 如何提交自己在学界和业界的影响力。<br>答:1.除了论文外还需要阅读经典的教材，论文的作者和关系<br>2.了解这个领域的几个阵营，阵营之间的争辩的点</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问:作为本科生，对本领域的专业词汇还不甚熟悉，因为不清楚中文表达对应的地道英文表述，文献搜索效率也大大降低，请问如何解决该问题？&lt;br&gt;答: 1.找专业英文教材 2.综述英文论文 3.专业学术翻译软件(中国知网学术翻译) &lt;/p&gt;
&lt;p&gt;问:老师您好，我是 作为人工智能基础
      
    
    </summary>
    
      <category term="知乎live" scheme="http://leiy.live/categories/%E7%9F%A5%E4%B9%8Elive/"/>
    
      <category term="如何开展高质量英文文献调研" scheme="http://leiy.live/categories/%E7%9F%A5%E4%B9%8Elive/%E5%A6%82%E4%BD%95%E5%BC%80%E5%B1%95%E9%AB%98%E8%B4%A8%E9%87%8F%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE%E8%B0%83%E7%A0%94/"/>
    
    
      <category term="英文文献" scheme="http://leiy.live/tags/%E8%8B%B1%E6%96%87%E6%96%87%E7%8C%AE/"/>
    
  </entry>
  
  <entry>
    <title>1.2 Neural networks basics</title>
    <link href="http://leiy.live/2019/03/13/deeplearning1_2/"/>
    <id>http://leiy.live/2019/03/13/deeplearning1_2/</id>
    <published>2019-03-13T04:30:03.267Z</published>
    <updated>2018-09-24T05:15:21.041Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="什么是分类问题？"><a href="#什么是分类问题？" class="headerlink" title="什么是分类问题？"></a>什么是分类问题？</h1><blockquote><p>在分类问题中，我们尝试着去预测结果是否是属于某一类(例如正确或错误),我们将这类问题称为分类问题</p></blockquote><h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><p>逻辑回归本质上等于在线性回归的输出端口加上一个sigmoid函数如果输出值大于0.5判断为1类如果小于0.5则判断为0类<br><img src="https://i.loli.net/2018/09/17/5b9f043aee4b0.png" alt="LogReg_kiank.png"></p><h1 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h1><p>线性回归中损失函数：</p><script type="math/tex; mode=display">    Loss\ =\ \frac{1}{2}\left( \ \hat{y} \ -y\ \right)^{2}</script><p>如果在分类问题中使用的线性回归的代价函数，我们发现最终在代价函数的优化问题上会出现许多的局部极小值，不利于对参数的优化，所以我们采用其他的代价函数</p><p>损失函数：</p><script type="math/tex; mode=display">    Loss=-\left( ylog\hat{y} \ +\ ( 1-y) log\left( 1-\hat{y}\right)\right)</script><p>代价函数：</p><script type="math/tex; mode=display">J( w,b) \ =\ \frac{1}{m}\sum ^{m}_{i\ =\ 1} Loss\left(\hat{y} \ ,y\right)</script><p>逻辑回归代价函数直观理解：<br>在理解逻辑函数之前我们先回顾下log函数的图像</p><p><img src="https://i.loli.net/2018/09/17/5b9f0fe5035ec.png" alt="f(x).png"></p><p>如果实际结果 y = 1 则损失函数变为 </p><p>\ Loss\left(\hat{y}  ,y\right)  = -log\hat{y} \\</p><p>从log函数图像可知此时如果我们预测的结果是0(与实际结果相反)则将会付出一个接近无穷的代价相反如果我们预测的结果是1(与实际结果相同),则我们将只会付出0代价<br>类似的如果实际结果 y = 0，则代价函数变为</p><p>\ Loss\left(\hat{y} ,y\right)  = -\left( log\left( 1 - \hat{y}\right)\right) \\</p><p>此时如果我们预测结果为1(与实际结果相反)则会付出一个很大的代价，而如果我们预测的结果与实际相同则我们付出的代价为0即不会付出任何代价。</p><h1 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h1><p>深度学习的优化问题大多使用梯度下降，或者是梯度下降的优化版本，前面我们已经知道了分类问题的代价函数，现在我们使用梯度下降来优化我们的参数</p><h1 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;什么是分类问题？&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="deeplearning.ai" scheme="http://leiy.live/categories/deeplearning-ai/"/>
    
      <category term="1.2 Neural networks basics" scheme="http://leiy.live/categories/deeplearning-ai/1-2-Neural-networks-basics/"/>
    
    
      <category term="deeplearning" scheme="http://leiy.live/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>1.1 Introduction to Deep Learning</title>
    <link href="http://leiy.live/2019/03/13/deeplearning1_1/"/>
    <id>http://leiy.live/2019/03/13/deeplearning1_1/</id>
    <published>2019-03-13T04:30:03.235Z</published>
    <updated>2018-08-16T16:08:15.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="神经网络的基本介绍"><a href="#神经网络的基本介绍" class="headerlink" title="神经网络的基本介绍"></a>神经网络的基本介绍</h1><h2 id="什么是神经网络？"><a href="#什么是神经网络？" class="headerlink" title="什么是神经网络？"></a>什么是神经网络？</h2><p>在回答这个问题之前让我们看看我们的大脑的神经元是怎么运作的？</p><p><img src="https://i.loli.net/2018/08/14/5b72b6627d275.png" alt="神经元"><br>大脑中的每一个神经元都可以被认为是一个处理单元(processing unit/Nucleus)，他包含许多的输入(树突)并且有一个输出(轴突)，每一个神经元都是一个学习模型，他们接受来自其他神经元的信息并通过计算将结果输出给其他神经元，所以神经网络是大量神经元相互链接并通过电脉冲来交流的网络。</p><h2 id="神经网络的建立"><a href="#神经网络的建立" class="headerlink" title="神经网络的建立"></a>神经网络的建立</h2><p>在介绍标准的神经网络之前先我们先来看一个最简单的神经网络图<br><img src="https://i.loli.net/2018/08/15/5b7444d8b3199.jpg" alt="SimpleNN"><br>类比之前介绍的有关神经元的概念我们可知这边输入对应的是神经元的树突而这边的输出对应的上面的轴突，所以这个最简单的神经元所做的事情就是输入一组其他神经元输出的数据然后经过计算将其结果输出给其他神经元。</p><p>介绍完单个的神经网络后我们来看看标准的神经网络结构<br><img src="https://i.loli.net/2018/08/16/5b744e4e6aa9b.jpg" alt="StandardNN"><br>与上面单个神经元网络所不同的是标准的神经元网络的每一个神经元存在很多个输入同时也存在很多个输出，习惯上我们将第一列神经元称为输入层最后一列神经元称为输出层而在他们中间的神经元称之为隐藏层，同样习惯上我们称一个神经网络有多少层时只计算隐藏层和输出层而不算输入层，如上图所示的神经网络图总共有2层。</p><p>除了上面提及的标准的神经网络结构还存在其他类型的神经网络结构分别是CNN和RNN<br><img src="https://i.loli.net/2018/08/16/5b759a24f1f3a.png" alt="NN_Example"><br>关于RNN/CNN 这里不做多讲，以后会进行介绍</p><p>不同的神经网络结构也自然导致了不同的应用场景，下面列举了不同神经网络结构的应用场景</p><div class="table-container"><table><thead><tr><th>Input(x)</th><th style="text-align:center">Output(y)</th><th style="text-align:right">Application</th></tr></thead><tbody><tr><td>Home features</td><td style="text-align:center">Price</td><td style="text-align:right">Real Estate</td></tr><tr><td>Ad,user info</td><td style="text-align:center">Click on ad?(0/1)</td><td style="text-align:right">Online Advertising</td></tr><tr><td>Image</td><td style="text-align:center">Object(1,..,1000)</td><td style="text-align:right">Photo tagging</td></tr><tr><td>Audio</td><td style="text-align:center">Text transcript</td><td style="text-align:right">Speech recognition</td></tr><tr><td>English</td><td style="text-align:center">Chinese</td><td style="text-align:right">Machine translation</td></tr><tr><td>Image,Radar info</td><td style="text-align:center">Position of other cars</td><td style="text-align:right">Autonomous driving</td></tr></tbody></table></div><p>最后，不得不提一下的是近年来AI蓬勃发展的主要原因有三个</p><ul><li>数据集的扩大</li><li>计算机计算能力的提升</li><li>算法的改善</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/mbadry1/DeepLearning.ai-Summary" target="_blank" rel="noopener">deeplearning.ai笔记</a><br><a href="https://www.coursera.org/specializations/deep-learning" target="_blank" rel="noopener">deeplearning.ai专项课程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;神经网络的基本介绍&quot;&gt;&lt;a href=&quot;#神经网络的基本介绍&quot; class=&quot;headerlink&quot; title=&quot;神经网络的基本介绍&quot;&gt;&lt;/a&gt;神经网络的基本介绍&lt;/h1&gt;&lt;h2 id=&quot;什么是神经网络？&quot;&gt;&lt;a href=&quot;#什么是神经网络？&quot; class=&quot;
      
    
    </summary>
    
      <category term="deeplearning.ai" scheme="http://leiy.live/categories/deeplearning-ai/"/>
    
      <category term="1.1 Introduction to Deep Learning" scheme="http://leiy.live/categories/deeplearning-ai/1-1-Introduction-to-Deep-Learning/"/>
    
    
      <category term="deeplearning" scheme="http://leiy.live/tags/deeplearning/"/>
    
  </entry>
  
</feed>
